<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Geometry on grid47</title>
    <link>https://www.grid47.xyz/tags/geometry/</link>
    <description>Recent content in Geometry on grid47</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>www.grid47.com - All rights reserved</copyright>
    <lastBuildDate>Wed, 06 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.grid47.xyz/tags/geometry/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 593: Valid Square</title>
      <link>https://www.grid47.xyz/leetcode/solution-593-valid-square/</link>
      <pubDate>Sun, 08 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-593-valid-square/</guid>
      <description>&lt;h2 id=&#34;hahahugoshortcode1209s0hbhb&#34;&gt;&lt;figure class=&#34;remote-image&#34; style=&#34;text-align:center; margin: 0;&#34;&gt;&#xA;    &lt;div style=&#34;position: relative; width:900px; max-width:100%; padding-bottom:56.25%; overflow: hidden; border-radius:0px;&#34;&gt;&#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/grid47/list-images/refs/heads/main/list/593.webp&#34; &#xA;           alt=&#34;A square being validated, with each corner softly glowing as the square is checked for correctness.&#34; &#xA;           style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;      &lt;figcaption style=&#34;font-size: 0.5em; font-weight: 300; color:#555; margin-top: 4px; line-height: 1.2;&#34;&gt;&#xA;        Solution to LeetCode 593: Valid Square Problem&#xA;      &lt;/figcaption&gt;&#xA;    &#xA;  &lt;/figure&gt;&#xA;  &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; Given four points in a 2D space, determine if these points form a valid square. The points are not necessarily provided in any particular order. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; The input consists of four points, each represented as an array of two integers [x, y], where x and y are the coordinates of the point in the 2D plane.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Input: p1 = [0, 0], p2 = [1, 1], p3 = [1, 0], p4 = [0, 1]&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Each point is represented by two integers, xi and yi, where -10^4 ≤ xi, yi ≤ 10^4.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The input will always contain exactly four points.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; Return &amp;#39;true&amp;#39; if the four points form a valid square, otherwise return &amp;#39;false&amp;#39;.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Output: &amp;#39;true&amp;#39;&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The output is a boolean value indicating whether the points form a valid square.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; To check if the four given points form a valid square by ensuring equal side lengths and 90-degree angles.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Calculate the pairwise distances between the four points.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Check if there are two unique distances: one for the sides (which should appear four times) and one for the diagonals (which should appear twice).&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure that the diagonals are longer than the sides, as they should be the hypotenuses of the right triangles formed by the sides.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The points will always form valid coordinates within the range [-10^4, 10^4]. There will be exactly four points provided.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The number of points is always four.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The coordinates of the points are within the range [-10^4, 10^4].&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The input will always contain four valid points, and the points are not guaranteed to be ordered in any way.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; These points form a square as they have equal sides and the diagonals are equal.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; These points do not form a square as the sides are not equal.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; To determine whether the points form a valid square, we compute the distances between each pair of points and check for two unique distances: one for the sides and one for the diagonals.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • A square has equal side lengths and equal diagonals.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • We can calculate the squared Euclidean distance between pairs of points.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If there are two distinct distances: one for sides (appearing four times) and one for diagonals (appearing twice), then the points form a square.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Calculate the squared distance between all pairs of points.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Store the distances in a set to ensure uniqueness.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Check if there are exactly two distinct distances: one for sides and one for diagonals.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure that the diagonals are longer than the sides.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The input will always contain four points, so empty inputs are not a concern.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The input coordinates are within a bounded range, so large inputs are not an issue.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Points with coordinates on axes or forming degenerate squares (e.g., all points on a straight line) need to be handled.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The points are not guaranteed to be in any specific order.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Distance Calculation&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Function Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Set Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Condition Check&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;d&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; p, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; q) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; (p[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; q[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;])&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;(p[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; q[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; (p[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; q[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (p[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; q[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;validSquare&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; p1, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; p2, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; p3, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; p4) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; s({d(p1, p2), d(p2, p3), d(p3, p4), d(p4, p1), d(p1, p3), d(p2, p4)});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;s.count(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; s.size() &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;d&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; p, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; q) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Declares the function `d` that calculates the squared Euclidean distance between two points, `p` and `q`, represented by 2D vectors. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Distance Calculation&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; (p[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; q[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;])&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;(p[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; q[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; (p[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; q[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (p[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; q[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Calculates the squared distance between the two points `p` and `q`. This avoids the need for a square root calculation, which is computationally expensive. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Function Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;validSquare&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; p1, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; p2, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; p3, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; p4) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Declares the function `validSquare` that takes four 2D points as input and returns a boolean indicating whether they form a valid square. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Set Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; s({d(p1, p2), d(p2, p3), d(p3, p4), d(p4, p1), d(p1, p3), d(p2, p4)});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Creates a set `s` to store the squared distances between all pairs of points. Since sets do not allow duplicates, this step helps in identifying whether there are exactly two unique distances (the side length and diagonal). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Condition Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;s.count(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; s.size() &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Checks if there are no zero distances (which would indicate overlapping points) and if the set contains exactly two unique distances, which is a characteristic of a square. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(1)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(1)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(6)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; Since there are always exactly four points, the time complexity is constant, O(6), due to the fixed number of pairwise comparisons.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(1)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(1)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The space complexity is constant, O(1), as we are only storing a fixed number of distances.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/valid-square/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 836: Rectangle Overlap</title>
      <link>https://www.grid47.xyz/leetcode/solution-836-rectangle-overlap/</link>
      <pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-836-rectangle-overlap/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are given two axis-aligned rectangles represented by two lists, rec1 and rec2. Each list contains four integers: [x1, y1, x2, y2], where (x1, y1) represents the bottom-left corner and (x2, y2) represents the top-right corner of the rectangle. You need to determine if the two rectangles overlap. Two rectangles overlap if their intersection area is positive. Rectangles that only touch at the edges or corners do not count as overlapping. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; The input consists of two lists representing two axis-aligned rectangles. Each list contains four integers: [x1, y1, x2, y2].&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • rec1.length == 4&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • rec2.length == 4&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • -10^9 &amp;lt;= rec1[i], rec2[i] &amp;lt;= 10^9&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Both rec1 and rec2 represent valid rectangles with a non-zero area.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; Return true if the two rectangles overlap, otherwise return false.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Output: true&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The output should be a boolean value indicating whether the rectangles overlap.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The goal is to check if there is a positive intersection area between the two given rectangles.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 1: Compare the horizontal and vertical ranges of both rectangles.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 2: Check if there is no overlap by ensuring the rectangles do not meet in either direction (horizontal or vertical).&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 3: Return true if there is an overlap, otherwise return false.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; Ensure that both rectangles are valid and the area is non-zero.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure the rectangles are axis-aligned and the coordinates form a valid rectangle.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Both rec1 and rec2 represent valid axis-aligned rectangles.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; These two rectangles overlap because their intersection has a positive area.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; These rectangles do not overlap because they only touch at the edges, not overlapping in area.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; The approach is to compare the boundaries of both rectangles and check for any overlap. If one rectangle is entirely to the left, right, above, or below the other, then they do not overlap.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The rectangles will overlap if and only if their projections on both the x and y axes intersect.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If either the horizontal or vertical projections do not overlap, the rectangles do not overlap.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 1: Extract the coordinates of the bottom-left and top-right corners of both rectangles.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 2: Check if the rectangles do not overlap based on the horizontal and vertical ranges.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 3: Return true if there is an overlap, otherwise return false.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Empty rectangles (with zero area) should not be considered valid inputs.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure that large input values (up to 10^9) are handled efficiently.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Consider edge cases where the rectangles touch at the edges or corners but do not overlap.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Check that both rectangles are valid and the coordinates form a non-zero area.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Definition&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Variable Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Variable Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Variable Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Variable Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Variable Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;7&#34;&gt; 7 Variable Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;8&#34;&gt; 8 Variable Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;9&#34;&gt; 9 Variable Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;10&#34;&gt; 10 Return Statement&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;11&#34;&gt; 11 Return Statement&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;12&#34;&gt; 12 Return Statement&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;13&#34;&gt; 13 Return Statement&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;isRectangleOverlap&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rect1, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rect2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; fx1&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect1[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; fx2&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect1[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; fy1&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect1[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; fy2&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect1[&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; sx1&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect2[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; sx2&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect2[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; sy1&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect2[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; sy2&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect2[&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;((sy1&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt;fy2) &lt;span style=&#34;color:#666&#34;&gt;||&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (fy1&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt;sy2) &lt;span style=&#34;color:#666&#34;&gt;||&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (fx1&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt;sx2) &lt;span style=&#34;color:#666&#34;&gt;||&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (fx2&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt;sx1));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Definition&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;isRectangleOverlap&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rect1, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rect2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line defines the function &amp;#39;isRectangleOverlap&amp;#39; which takes two vectors representing the coordinates of two rectangles. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Variable Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; fx1&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect1[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line extracts the x-coordinate of the bottom-left corner of the first rectangle (rect1). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Variable Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; fx2&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect1[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line extracts the x-coordinate of the top-right corner of the first rectangle (rect1). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Variable Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; fy1&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect1[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line extracts the y-coordinate of the bottom-left corner of the first rectangle (rect1). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Variable Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; fy2&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect1[&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line extracts the y-coordinate of the top-right corner of the first rectangle (rect1). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Variable Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; sx1&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect2[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line extracts the x-coordinate of the bottom-left corner of the second rectangle (rect2). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;7 : Variable Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; sx2&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect2[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line extracts the x-coordinate of the top-right corner of the second rectangle (rect2). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;8 : Variable Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; sy1&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect2[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line extracts the y-coordinate of the bottom-left corner of the second rectangle (rect2). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;9 : Variable Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; sy2&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rect2[&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line extracts the y-coordinate of the top-right corner of the second rectangle (rect2). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;10 : Return Statement&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;((sy1&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt;fy2) &lt;span style=&#34;color:#666&#34;&gt;||&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This checks if the second rectangle is to the left, right, above, or below the first rectangle. If any of these conditions are true, there is no overlap. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;11 : Return Statement&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (fy1&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt;sy2) &lt;span style=&#34;color:#666&#34;&gt;||&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This checks if the second rectangle is entirely below the first rectangle. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;12 : Return Statement&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (fx1&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt;sx2) &lt;span style=&#34;color:#666&#34;&gt;||&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This checks if the second rectangle is entirely to the right of the first rectangle. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;13 : Return Statement&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (fx2&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt;sx1));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This checks if the second rectangle is entirely to the left of the first rectangle. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(1), the solution involves constant time checks.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(1), the solution requires only constant time comparisons.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(1), only a fixed number of comparisons are made.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The time complexity is constant, as we are only performing a few comparisons.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(1), the space complexity remains constant.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(1), the space complexity is constant as we only store the rectangle coordinates.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The space complexity is constant since only a fixed amount of data is needed to perform the checks.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/rectangle-overlap/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 858: Mirror Reflection</title>
      <link>https://www.grid47.xyz/leetcode/solution-858-mirror-reflection/</link>
      <pubDate>Tue, 13 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-858-mirror-reflection/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; In a special square room with mirrors on all four walls, except for the southwest corner, there are receptors at three other corners, numbered 0, 1, and 2. A laser ray is fired from the southwest corner and hits the east wall at a certain distance from the 0th receptor. Given the side length of the square room, p, and the distance q from the 0th receptor on the east wall where the laser ray meets, return the number of the receptor the ray hits first after bouncing around the room. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; You are given two integers: p, the length of the side of the square room, and q, the distance from the southwest corner to where the laser first meets the east wall.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Input: p = 4, q = 2&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= q &amp;lt;= p &amp;lt;= 1000&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; The function should return an integer representing the receptor number (0, 1, or 2) where the laser ray first reaches after bouncing off the walls.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Output: 1&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The goal is to determine which receptor the laser ray hits first, considering how it reflects off the walls of the square room.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 1: Check the divisibility of both p and q by 2 and repeatedly divide them by 2 until one of them is odd.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 2: Use the formula `1 - p%2 &amp;#43; q%2` to determine the receptor number.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 3: Return the receptor number.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The input values p and q are guaranteed to follow the constraints and the ray will eventually meet a receptor.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • p is the length of the square room&amp;#39;s sides.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • q is the distance from the southwest corner to the first point where the ray meets the east wall.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The test cases are guaranteed so that the ray will meet a receptor eventually.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The room is always square.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The input values p and q are valid and guarantee that the ray will eventually meet a receptor.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: p = 4, q = 2&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; In this example, the laser first meets the east wall at a distance of 2 from the 0th receptor. After bouncing, the ray reaches receptor 1, as it is reflected back towards the wall.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; To solve the problem efficiently, we utilize a mathematical approach that simplifies the conditions for determining the receptor. By reducing the values of p and q iteratively through division, we arrive at a formula that can quickly calculate the receptor number.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The problem can be reduced by dividing both p and q by 2 when they are even.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The solution involves manipulating the parity of p and q to deduce which receptor the ray meets.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 1: Continuously divide both p and q by 2 while they are even.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 2: Once one of them becomes odd, use the formula `1 - p%2 &amp;#43; q%2` to find the receptor.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 3: Return the receptor number as the result.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • N/A: Inputs are guaranteed to meet the constraints.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • For large values of p and q, the solution still works within time limits due to efficient reduction of the values.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • When p equals q and both are odd, the ray will hit receptor 2.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The values of p and q will always satisfy the input constraints.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Definition&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 While Loop&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Return Statement&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;mirrorReflection&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; p, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; q) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt;( p &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; q &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) p &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, q &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; p&lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; q&lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Definition&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;mirrorReflection&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; p, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; q) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; The function `mirrorReflection` takes two integers `p` and `q` as input and returns the mirror reflection based on the conditions in the while loop. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : While Loop&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt;( p &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; q &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) p &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, q &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; The `while` loop repeatedly halves both `p` and `q` (using right shift operator) as long as both are even. This effectively reduces the problem size until at least one of them becomes odd. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Return Statement&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; p&lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; q&lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; After exiting the loop, the function returns a value based on the parity of `p` and `q`. It checks if `p` is odd and `q` is odd and returns an appropriate result based on the mirror reflection rules. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(log p), as the values of p and q are halved iteratively until one of them becomes odd.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(log p), due to the iterative halving process.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(log p), because the division operation continues until one of p or q is odd.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; &lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(1), since no additional space is needed beyond the input values.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(1), as only a few variables are used to calculate the result.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; &lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/mirror-reflection/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 939: Minimum Area Rectangle</title>
      <link>https://www.grid47.xyz/leetcode/solution-939-minimum-area-rectangle/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-939-minimum-area-rectangle/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are given a set of points in a 2D plane, represented by an array where each point is a pair of integers [xi, yi]. Your task is to find the minimum area of a rectangle that can be formed using these points, with sides parallel to the X and Y axes. If no such rectangle can be formed, return 0. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; The input consists of a 2D array where each element represents a point in the X-Y plane. Each point is a pair of integers [xi, yi].&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Input: points = [[1,1],[2,2],[3,3],[1,3],[3,1]]&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= points.length &amp;lt;= 500&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • points[i].length == 2&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= xi, yi &amp;lt;= 40000&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • All the given points are unique.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; Return the minimum area of the rectangle formed by these points, or 0 if no such rectangle exists.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Output: 4&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If no rectangle can be formed, return 0.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The goal is to identify all possible rectangles formed by four distinct points. The sides of the rectangle should be parallel to the X and Y axes, so we need to check for pairs of points with the same X or Y coordinates.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1. Store the points in a hash map grouped by their X-coordinates.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2. For each pair of points, check if the remaining two points can form a rectangle with sides parallel to the axes.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 3. Calculate the area of the rectangle formed by the points.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 4. Keep track of the minimum area found.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The constraints ensure that the input contains a manageable number of points, and that each point is distinct.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The number of points will not exceed 500.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Coordinates are within the range [0, 40000].&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • All points are distinct and can potentially form a rectangle.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The rectangle sides are parallel to the X and Y axes.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: points = [[1,1],[2,2],[3,3],[1,3],[3,1]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; In this case, the points (1,1), (1,3), (3,1), and (3,3) form a rectangle. The minimum area is calculated as (3 - 1) * (3 - 1) = 4.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: points = [[1,1],[1,2],[2,2],[2,1]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The points form a perfect rectangle with sides parallel to the axes. The area is (2 - 1) * (2 - 1) = 1.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; We will utilize a hash map to store the X-coordinates of the points, and for each pair of points, we check if the other two points necessary for a rectangle exist. If they do, we calculate the area of the rectangle and keep track of the minimum area.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The problem is essentially about identifying pairs of points that can form opposite corners of a rectangle.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Using a hash map will help efficiently group points by their X-coordinates, allowing us to check for matching Y-coordinates quickly.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1. Store the points in a hash map where each key is the X-coordinate and the value is a set of corresponding Y-coordinates.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2. For each pair of points, check if the remaining two points can form a rectangle. Specifically, check if the other pair of points have matching X or Y coordinates.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 3. Calculate the area of the rectangle formed by the points and keep track of the minimum area found.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 4. Return the minimum area, or 0 if no rectangle can be formed.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If the input has less than four points, return 0 as no rectangle can be formed.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If there are a large number of points (up to 500), ensure that the solution is efficient enough to handle this within the time limits.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If all the points are collinear (either all on the same vertical or horizontal line), return 0 as no rectangle can be formed.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure that each point is distinct, as duplicates would make it impossible to form a rectangle.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Variable Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Point Insertion&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Map Population&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Variable Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Area Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;7&#34;&gt; 7 Outer Loop&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;8&#34;&gt; 8 Inner Loop&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;9&#34;&gt; 9 Point Extraction&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;10&#34;&gt; 10 Point Extraction&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;11&#34;&gt; 11 Rectangle Check&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;12&#34;&gt; 12 Map Check&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;13&#34;&gt; 13 Area Update&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;14&#34;&gt; 14 Return Statement&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;minAreaRect&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; pts) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    unordered_map&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;, set&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; mp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a0a000&#34;&gt;it&lt;/span&gt;: pts)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mp[it[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]].insert(it[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pts.size();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; area &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; INT_MAX;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; j&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; x1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pts[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], y1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pts[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; x2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pts[j][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], y2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pts[j][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(x1 &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; x2 &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y1 &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; y2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(mp[x1].find(y2) &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; mp[x1].end() &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              mp[x2].find(y1) &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; mp[x2].end())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                area &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; min(area, abs(x1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x2) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; abs(y1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; y2));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; area &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; INT_MAX&lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; area;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;minAreaRect&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; pts) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line defines the function `minAreaRect`, which takes a vector of points `pts` and returns the minimum area of a rectangle that can be formed using these points. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Variable Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    unordered_map&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;, set&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; mp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; An unordered map `mp` is created to store each x-coordinate as a key and the set of corresponding y-coordinates as the value. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Point Insertion&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a0a000&#34;&gt;it&lt;/span&gt;: pts)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Iterate through each point in the `pts` vector. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Map Population&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mp[it[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]].insert(it[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; For each point, insert the y-coordinate into the set corresponding to the x-coordinate in the map. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Variable Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pts.size();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Store the number of points in the variable `n`. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Area Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; area &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; INT_MAX;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Initialize `area` to the maximum integer value to store the minimum area found. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;7 : Outer Loop&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Start an outer loop to iterate over each point in the list. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;8 : Inner Loop&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; j&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Start an inner loop to iterate over points that come after the current point in the outer loop. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;9 : Point Extraction&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; x1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pts[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], y1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pts[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Extract the x and y coordinates of the first point in the pair. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;10 : Point Extraction&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; x2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pts[j][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], y2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pts[j][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Extract the x and y coordinates of the second point in the pair. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;11 : Rectangle Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(x1 &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; x2 &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y1 &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; y2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Check if the two points form the potential diagonal of a rectangle (i.e., their x and y coordinates must differ). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;12 : Map Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(mp[x1].find(y2) &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; mp[x1].end() &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mp[x2].find(y1) &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; mp[x2].end())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Check if the other two points of the rectangle (which would complete the rectangle) exist in the map. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;13 : Area Update&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                area &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; min(area, abs(x1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x2) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; abs(y1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; y2));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Update the `area` variable to store the minimum area found by comparing it with the area of the current rectangle. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;14 : Return Statement&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; area &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; INT_MAX&lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; area;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Return the minimum area found. If no valid rectangle is found, return 0. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n^2)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(n^2)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n^2)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; In the worst case, we need to check all pairs of points, leading to a time complexity of O(n^2), where n is the number of points.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The space complexity is O(n) due to the storage of points in the hash map, where n is the number of points.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-area-rectangle/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 963: Minimum Area Rectangle II</title>
      <link>https://www.grid47.xyz/leetcode/solution-963-minimum-area-rectangle-ii/</link>
      <pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-963-minimum-area-rectangle-ii/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are given a set of points in a 2D plane, represented as an array where each point is in the format [xi, yi]. Your task is to find the minimum possible area of any rectangle formed by these points, where the sides of the rectangle do not need to be parallel to the X or Y axes. If no rectangle can be formed, return 0. Answers within 10^-5 of the actual area are considered correct. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; The input is an array of unique points in a 2D plane. Each point is represented as a pair of integers [xi, yi], where xi and yi denote the coordinates of the point.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Input: points = [[0,2],[1,1],[2,0],[1,3],[3,1]]&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= points.length &amp;lt;= 50&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • points[i].length == 2&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= xi, yi &amp;lt;= 40,000&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • All points are unique.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; The output is a floating-point number representing the minimum possible area of a rectangle formed by the given points. If no rectangle can be formed, return 0.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Output: 1.00000&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The result must be accurate within 10^-5 of the actual area.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; Find the minimum area of a rectangle that can be formed using the given points. If no rectangle exists, return 0.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1. Use combinations of two points to define potential rectangle sides.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2. Use a hashing technique to group points by their center and length for efficient pair comparisons.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 3. Calculate the area for each possible rectangle, keeping track of the minimum value.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 4. If no rectangle is formed, return 0.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The input array will contain between 1 and 50 points. All points are unique and lie within the range [0, 40,000] on both axes.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= points.length &amp;lt;= 50&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= xi, yi &amp;lt;= 40,000&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The input points are unique and will not have duplicates.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • It is possible for no rectangle to be formed, in which case the output should be 0.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: points = [[0,2],[2,0],[1,1],[3,3]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The minimum area rectangle is formed by points [0,2],[2,0],[1,1],[3,3] with an area of 2.00000.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: points = [[1,0],[2,2],[3,1],[0,3]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; No valid rectangle can be formed from these points, so the output is 0.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: points = [[0,0],[0,2],[2,0],[2,2]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The minimum area rectangle is formed by points [0,0],[0,2],[2,0],[2,2] with an area of 4.00000.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; To solve the problem, consider all pairs of points that define diagonals of a rectangle. Use hashing to efficiently group potential rectangles based on shared center and diagonal lengths. Compute the area for each valid rectangle.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • A rectangle can be identified by its diagonals, as they share the same midpoint and length.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Using a hash map allows efficient grouping of diagonals to form rectangles.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Iterate through all pairs of points, calculate their center and diagonal length, and group them using a hash map.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Check for rectangles in each group and compute their area, keeping track of the minimum area.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1. Define a helper function to compute the square of the distance between two points.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2. Use two nested loops to generate all pairs of points.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 3. For each pair, compute their center and diagonal length, and store them in a hash map.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 4. For each group of potential rectangles, compute the area and update the minimum area if applicable.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 5. If no rectangle is found, return 0.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The input array will always have at least one point, so empty input is not possible.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Even with the maximum constraint of 50 points, the solution must efficiently handle O(n^2) pairwise comparisons.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • All points lying on a single line (horizontal, vertical, or diagonal) will not form any rectangle.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • All points are unique, and their coordinates lie within the valid range.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Distance Calculation&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Main Function Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Hash Map Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Outer Loop&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Inner Loop&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;7&#34;&gt; 7 Center Calculation&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;8&#34;&gt; 8 Distance Calculation&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;9&#34;&gt; 9 Group Pairs&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;10&#34;&gt; 10 Iterate Groups&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;11&#34;&gt; 11 Iterate Lengths&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;12&#34;&gt; 12 Compare Pairs&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;13&#34;&gt; 13 Pair Comparisons&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;14&#34;&gt; 14 Rectangle Properties&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;15&#34;&gt; 15 Area Calculation&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;16&#34;&gt; 16 Update Result&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;17&#34;&gt; 17 Return Result&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;size_t &lt;span style=&#34;color:#00a000&#34;&gt;d2&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; x1, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; y1, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; x2, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; y2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; (x1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x2) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (x1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x2) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; (y1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; y2) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (y1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; y2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;minAreaFreeRect&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; ps, size_t res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  unordered_map&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;size_t, unordered_map&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;size_t, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; m;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; ps.size(); &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; ps.size(); &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;j) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; center &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ((size_t)(ps[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; ps[j][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; ps[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; ps[j][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; len &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; d2(ps[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], ps[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], ps[j][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], ps[j][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      m[center][len].push_back({ ps[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], ps[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], ps[j][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], ps[j][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; it_c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; begin(m); it_c &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; end(m); &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;it_c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; it_l &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; begin(it_c&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;second); it_l &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; end(it_c&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;second); &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;it_l)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; it_l&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;second.size(); &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; it_l&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;second.size(); &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;j) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;p1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; it_l&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;second[i], &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;p2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; it_l&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;second[j];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; area &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; d2(p1[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], p1[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], p2[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], p2[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; d2(p1[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], p1[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], p2[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;], p2[&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; (res &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;||&lt;/span&gt; res &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; area) res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; area;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; sqrt(res);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;size_t &lt;span style=&#34;color:#00a000&#34;&gt;d2&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; x1, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; y1, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; x2, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; y2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Declares the helper function to calculate the squared distance between two points. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Distance Calculation&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; (x1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x2) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (x1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x2) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; (y1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; y2) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (y1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; y2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Computes the squared Euclidean distance to avoid using square root for performance. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Main Function Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;minAreaFreeRect&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; ps, size_t res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Declares the main function to calculate the minimum rectangle area. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Hash Map Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  unordered_map&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;size_t, unordered_map&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;size_t, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; m;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Initializes a hash map to group point pairs by their center and distance. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Outer Loop&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; ps.size(); &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Iterates through all points as the first point of a pair. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Inner Loop&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; ps.size(); &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;j) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Iterates through subsequent points to form a pair with the current point. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;7 : Center Calculation&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; center &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ((size_t)(ps[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; ps[j][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; ps[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; ps[j][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Calculates a unique key representing the center of the line segment formed by the pair. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;8 : Distance Calculation&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; len &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; d2(ps[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], ps[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], ps[j][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], ps[j][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Computes the squared length of the line segment formed by the pair. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;9 : Group Pairs&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      m[center][len].push_back({ ps[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], ps[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], ps[j][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], ps[j][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Groups the pair into the hash map based on center and distance. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;10 : Iterate Groups&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; it_c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; begin(m); it_c &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; end(m); &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;it_c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Iterates over each center group in the hash map. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;11 : Iterate Lengths&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; it_l &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; begin(it_c&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;second); it_l &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; end(it_c&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;second); &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;it_l)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Iterates over each length group within a center group. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;12 : Compare Pairs&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; it_l&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;second.size(); &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Iterates over pairs in the current group to compare them. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;13 : Pair Comparisons&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; it_l&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;second.size(); &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;j) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Compares pairs to check if they form a rectangle. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;14 : Rectangle Properties&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;p1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; it_l&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;second[i], &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;p2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; it_l&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;second[j];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Extracts the two pairs of points to calculate rectangle properties. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;15 : Area Calculation&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; area &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; d2(p1[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], p1[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], p2[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], p2[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; d2(p1[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], p1[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], p2[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;], p2[&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Calculates the area of the rectangle formed by the pairs. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;16 : Update Result&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; (res &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;||&lt;/span&gt; res &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; area) res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; area;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Updates the minimum area if a smaller rectangle is found. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;17 : Return Result&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;sqrt&lt;/span&gt;(res);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Returns the square root of the minimum area found. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n^2)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(n^2)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n^2)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The time complexity is O(n^2) due to the nested loop for generating pairs of points.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n^2)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The space complexity is determined by the size of the hash map storing potential diagonals.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-area-rectangle-ii/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 973: K Closest Points to Origin</title>
      <link>https://www.grid47.xyz/leetcode/solution-973-k-closest-points-to-origin/</link>
      <pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-973-k-closest-points-to-origin/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; Given an array of points on a 2D plane, find the k closest points to the origin (0, 0) based on Euclidean distance. If multiple points have the same distance, any order is acceptable. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; An array of points on the X-Y plane and an integer k.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; points = [[2, -1], [1, 2], [-3, -4]], k = 2&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= k &amp;lt;= points.length &amp;lt;= 10^4&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • -10^4 &amp;lt;= xi, yi &amp;lt;= 10^4&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; An array of k points that are closest to the origin.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; [[1, 2], [2, -1]]&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The answer may be returned in any order.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; Identify the k points with the smallest Euclidean distances from the origin.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Calculate the Euclidean distance for each point from the origin.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Sort the points by distance in ascending order.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Return the first k points.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; Ensure the inputs adhere to the problem&amp;#39;s constraints.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= k &amp;lt;= points.length &amp;lt;= 10^4&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • -10^4 &amp;lt;= xi, yi &amp;lt;= 10^4&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The input points array is valid and non-empty.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The integer k is always less than or equal to the length of the points array.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; points = [[-1, -1], [2, 2], [4, 5]], k = 1&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The closest point is [-1, -1] because it has the smallest Euclidean distance to the origin.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; points = [[2, -1], [1, 2], [-3, -4]], k = 2&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The two closest points are [1, 2] and [2, -1] because their distances are smaller than [-3, -4].&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; Use a priority queue to efficiently find the k smallest distances.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The problem involves finding the k smallest distances.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Sorting all distances is inefficient for large inputs.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Using a priority queue (max-heap) to maintain the k closest points ensures efficient processing.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Define a custom comparator for the priority queue based on distance.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Iterate through the points, pushing each point into the priority queue.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If the size of the priority queue exceeds k, remove the farthest point.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Convert the priority queue to an output array.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • k = 0, no points should be returned.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Maximum constraint of points and k, ensuring efficient handling.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • All points have the same distance to the origin.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Handle cases where k equals the length of the points array.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Definition&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Priority Queue Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Loop Over Points&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Push to Priority Queue&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Answer Vector Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Extract Closest Points&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;7&#34;&gt; 7 Push Closest Point&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;8&#34;&gt; 8 Pop Closest Point&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;9&#34;&gt; 9 Return Statement&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; kClosest(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; pts, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    priority_queue&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;, cmp&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; pq;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;it&lt;/span&gt; : pts) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pq.push(it);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt;(k&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ans.push_back(pq.top());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pq.pop();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Definition&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; kClosest(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; pts, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Defines the function `kClosest`, which takes a 2D vector of points and an integer &amp;#39;k&amp;#39;, and returns the &amp;#39;k&amp;#39; closest points from the origin. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Priority Queue Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    priority_queue&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;, cmp&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; pq;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Declares a priority queue `pq` that stores points in a specific order determined by the comparison function `cmp`, allowing efficient extraction of the closest points. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Loop Over Points&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;it&lt;/span&gt; : pts) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Iterates through all the points in the input vector `pts` to add them to the priority queue. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Push to Priority Queue&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pq.push(it);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Pushes each point from `pts` into the priority queue to sort the points according to the comparison criteria defined by `cmp`. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Answer Vector Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Declares a 2D vector `ans` to store the closest points as they are extracted from the priority queue. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Extract Closest Points&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt;(k&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Begins a loop to extract the &amp;#39;k&amp;#39; closest points from the priority queue. This continues until &amp;#39;k&amp;#39; points are extracted. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;7 : Push Closest Point&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ans.push_back(pq.top());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Adds the top point from the priority queue (the closest point) to the `ans` vector. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;8 : Pop Closest Point&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pq.pop();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Removes the top point from the priority queue after it is added to the `ans` vector. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;9 : Return Statement&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Returns the `ans` vector containing the &amp;#39;k&amp;#39; closest points to the origin. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n log k)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(n log k)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n log k)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; Iterate through n points, maintaining a heap of size k.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(k)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(k)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; Heap size is limited to k elements.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/k-closest-points-to-origin/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1232: Check If It Is a Straight Line</title>
      <link>https://www.grid47.xyz/leetcode/solution-1232-check-if-it-is-a-straight-line/</link>
      <pubDate>Sat, 06 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-1232-check-if-it-is-a-straight-line/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are given an array of coordinates, where each coordinate represents a point in the 2D plane. Your task is to check if all the points in the array lie on the same straight line. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; The input consists of a list of points, where each point is represented by two integers [x, y].&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; coordinates = [[2, 3], [4, 5], [6, 7], [8, 9], [10, 11]]&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2 &amp;lt;= coordinates.length &amp;lt;= 1000&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • coordinates[i].length == 2&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • -10^4 &amp;lt;= coordinates[i][0], coordinates[i][1] &amp;lt;= 10^4&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • coordinates contains no duplicate point.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; The output should be a boolean value indicating whether all points lie on the same straight line.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; true&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Return &amp;#39;true&amp;#39; if all points are collinear, otherwise return &amp;#39;false&amp;#39;.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The goal is to check if the slope between consecutive points remains the same across the entire list of points.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Calculate the slope between the first two points.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • For each subsequent point, calculate the slope between it and the first point.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If the slopes are not equal, return false.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If all slopes are equal, return true.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The input list contains no duplicate points, and the size of the list is between 2 and 1000.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure no duplicate points in the input array.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The input coordinates represent valid points in a 2D plane.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The points are given in no particular order.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; coordinates = [[2, 3], [4, 5], [6, 7], [8, 9], [10, 11]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The points have the same slope between consecutive pairs, meaning they lie on the same straight line, so the output is &amp;#39;true&amp;#39;.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; coordinates = [[1, 1], [2, 3], [3, 5], [4, 7]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The slope between the first two points is different from the slopes between the other points, meaning they do not lie on the same straight line, so the output is &amp;#39;false&amp;#39;.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; To determine if the points are collinear, we calculate the slope between the first point and the second, then compare it to the slope between the first point and each subsequent point.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The slope between two points is given by the formula (y2 - y1) / (x2 - x1).&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If the slopes between consecutive points are all equal, the points must lie on the same straight line.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Calculate the slope between the first two points.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • For each subsequent point, calculate the slope between it and the first point.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If all slopes are equal, return true. Otherwise, return false.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Not applicable, as the input will always contain at least two points.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The solution should handle up to 1000 points efficiently.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The coordinates can include negative values, but the slope calculation remains unaffected.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure that there are no duplicate points in the input.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Definition&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Slope Calculation&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Iteration Over Points&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Slope Comparison&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Slope Check&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Return True&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;checkStraightLine&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; cord) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; slopt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (cord[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; cord[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;INT_MAX&lt;/span&gt;: (&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;)(cord[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; cord[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;)(cord[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; cord[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; cord.size(); i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; slp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (cord[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; cord[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#a0a000&#34;&gt;INT_MAX&lt;/span&gt;: (&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;)(cord[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; cord[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;)(cord[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; cord[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(slp &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; slopt) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a2f&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a2f&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Definition&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;checkStraightLine&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; cord) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This is the function definition for `checkStraightLine`. The function takes a 2D vector of coordinates and checks whether the points lie on a straight line. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Slope Calculation&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; slopt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (cord[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; cord[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;INT_MAX&lt;/span&gt;: (&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;)(cord[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; cord[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;)(cord[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; cord[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; The slope between the first two points is calculated. If the x-values of the points are the same, the slope is set to `INT_MAX` to represent an undefined slope (vertical line). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Iteration Over Points&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; cord.size(); i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; The function iterates over all the remaining points starting from the third point. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Slope Comparison&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; slp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (cord[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; cord[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#a0a000&#34;&gt;INT_MAX&lt;/span&gt;: (&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;)(cord[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; cord[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;)(cord[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; cord[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; For each point, the slope with respect to the first point is calculated. If the x-values are the same, the slope is set to `INT_MAX`. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Slope Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(slp &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; slopt) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a2f&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; If the calculated slope of any point does not match the slope of the first two points, the function returns `false`, indicating the points do not form a straight line. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Return True&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a2f&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; If all slopes are the same, the function returns `true`, indicating the points form a straight line. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(n)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; We iterate through the points exactly once, so the time complexity is O(n), where n is the number of points.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(1)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(1)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The space complexity is constant, as we only use a few variables for slope calculation.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/check-if-it-is-a-straight-line/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1266: Minimum Time Visiting All Points</title>
      <link>https://www.grid47.xyz/leetcode/solution-1266-minimum-time-visiting-all-points/</link>
      <pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-1266-minimum-time-visiting-all-points/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are given an array of points with integer coordinates. Calculate the minimum time to visit all points in the given order using vertical, horizontal, or diagonal movements. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; The input consists of an array of points, where each point is represented by a pair of integers [x, y].&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; [[2, 2], [5, 5], [1, 3]]&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= points.length &amp;lt;= 100&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • -1000 &amp;lt;= points[i][0], points[i][1] &amp;lt;= 1000&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; The output is an integer representing the minimum time in seconds to visit all points in the given order.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; 6&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The time is measured in seconds, considering the movement options.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; Determine the minimum time to visit all points in the given order.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1. Calculate the time to move from the current point to the next using the maximum of the differences in x and y coordinates (taking diagonal moves into account).&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2. Add the time for each pair of consecutive points to the total time.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 3. Return the total time after visiting all points.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The constraints ensure that the solution works within the time and space limits.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= points.length &amp;lt;= 100&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • -1000 &amp;lt;= points[i][0], points[i][1] &amp;lt;= 1000&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The array contains at least one point.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The input points are valid and within the given constraints.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; [[2, 2], [5, 5], [1, 3]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The total time to visit all points is 6 seconds: 3 seconds to go from [2, 2] to [5, 5] and 3 seconds to go from [5, 5] to [1, 3].&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; Use the concept of Manhattan distance but consider diagonal movements to minimize the time.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • We can calculate the time for each move between points by considering the largest difference in coordinates (either horizontally or vertically).&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Diagonal moves can be used to reduce the total time.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • To find the minimum time, calculate the maximum of the horizontal and vertical distances between two consecutive points.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1. Iterate through the list of points.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2. For each pair of consecutive points, calculate the time to move between them by taking the maximum of the absolute differences in x and y coordinates.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 3. Add the time for each movement to the total time.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 4. Return the total time after iterating through all points.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The input array will always contain at least one point as per the constraints.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure that the solution handles the maximum number of points efficiently.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • All points may be located at the same position, which would result in zero time.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The input is valid and within the problem&amp;#39;s constraints.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Definition&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Variable Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Loop (Iterate Through Points)&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Distance Calculation&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Return Statement&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;minTimeToVisitAllPoints&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; points) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; points.size(); i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ans &lt;span style=&#34;color:#666&#34;&gt;+=&lt;/span&gt; max(abs(points[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; points[i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]), abs(points[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; points[i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Definition&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;minTimeToVisitAllPoints&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; points) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This defines the function `minTimeToVisitAllPoints`, which takes a 2D vector `points` representing a list of coordinates and returns the minimum time required to visit all points. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Variable Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This initializes an integer variable `ans` to 0, which will accumulate the total time needed to visit all the points. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Loop (Iterate Through Points)&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; points.size(); i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This loop iterates through the points starting from the second point (index 1) and compares each point with the previous one. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Distance Calculation&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ans &lt;span style=&#34;color:#666&#34;&gt;+=&lt;/span&gt; max(abs(points[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; points[i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]), abs(points[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; points[i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This calculates the time it takes to move from the previous point to the current point. The time is the maximum of the vertical and horizontal distance between the points. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Return Statement&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This returns the total accumulated time `ans`, which represents the minimum time required to visit all points. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n), where n is the number of points.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(n) for each iteration over the points.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n), where n is the number of points.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The time complexity is linear because we iterate over the list of points once.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(1), as no additional space is used other than for variables.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(1), since only a constant amount of extra space is needed.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The space complexity is constant since only a few variables are used to calculate the total time.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-time-visiting-all-points/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1401: Circle and Rectangle Overlapping</title>
      <link>https://www.grid47.xyz/leetcode/solution-1401-circle-and-rectangle-overlapping/</link>
      <pubDate>Wed, 19 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-1401-circle-and-rectangle-overlapping/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are given a circle represented by its radius and center coordinates, as well as an axis-aligned rectangle represented by its bottom-left and top-right corners. Determine if the circle and the rectangle overlap, i.e., if there is any point inside both the circle and the rectangle. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; The input consists of the radius and coordinates of the center of the circle, along with the coordinates of the bottom-left and top-right corners of the rectangle.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; [2, 1, 2, 0, 0, 3, 3]&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= radius &amp;lt;= 2000&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • -10^4 &amp;lt;= xCenter, yCenter &amp;lt;= 10^4&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • -10^4 &amp;lt;= x1 &amp;lt; x2 &amp;lt;= 10^4&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • -10^4 &amp;lt;= y1 &amp;lt; y2 &amp;lt;= 10^4&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; The output is a boolean value. Return `true` if the circle and rectangle overlap, otherwise return `false`.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; true&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The output is `true` if the circle and rectangle overlap, otherwise `false`.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The goal is to check if the circle and rectangle share any common points.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Shift the coordinates of the rectangle to the circle&amp;#39;s center by subtracting the circle&amp;#39;s center from the rectangle&amp;#39;s coordinates.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Check if any part of the rectangle intersects the circle by comparing the distance from the circle&amp;#39;s center to the rectangle&amp;#39;s edges and corners.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; Ensure that all the input values are within the defined constraints.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The radius is a positive integer and the center coordinates are within a specified range.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The rectangle&amp;#39;s corners are within the allowed bounds.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The circle&amp;#39;s radius is a positive integer.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The rectangle&amp;#39;s corners are distinct and follow the constraints.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: [2, 1, 2, 0, 0, 3, 3]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; In this case, the circle with radius 2 and center (1, 2) intersects with the rectangle from (0, 0) to (3, 3), as the two shapes share a common point.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: [2, 0, 0, 3, -1, 5, 1]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; Here, the circle does not overlap with the rectangle, as there is no point that lies in both the circle and the rectangle.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; The approach involves checking if the circle and rectangle share any common points by considering their geometric properties.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • A circle can be represented by its center and radius, while a rectangle is defined by its corner coordinates.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The challenge is to determine if any part of the rectangle lies within the circle.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • We can check if the rectangle intersects with the circle using distance calculations between the rectangle&amp;#39;s corners and the circle&amp;#39;s center.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1. Translate the rectangle coordinates so the circle&amp;#39;s center is at the origin.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2. Check if any part of the rectangle intersects the circle by calculating the distance from the circle&amp;#39;s center to the rectangle&amp;#39;s edges and corners.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • What if the radius is 0?&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure the solution can handle inputs at the upper bounds of the constraints.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • What if the rectangle is just a point?&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The solution should be efficient enough for large values of `radius` and large coordinates of the rectangle.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Method Definition&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Coordinate Adjustment&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Coordinate Adjustment&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Coordinate Adjustment&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Coordinate Adjustment&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Intersection Calculation&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;7&#34;&gt; 7 Intersection Calculation&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;8&#34;&gt; 8 Return Statement&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;checkOverlap&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; radius, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; xCenter, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; yCenter, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; x1, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; y1, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; x2, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; y2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x1 &lt;span style=&#34;color:#666&#34;&gt;-=&lt;/span&gt; xCenter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x2 &lt;span style=&#34;color:#666&#34;&gt;-=&lt;/span&gt; xCenter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y1 &lt;span style=&#34;color:#666&#34;&gt;-=&lt;/span&gt; yCenter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y2 &lt;span style=&#34;color:#666&#34;&gt;-=&lt;/span&gt; yCenter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; mx &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x1 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x2 &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; min(x1 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x1, x2 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x2)&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; my &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; y1 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; y2 &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; min(y1 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; y1, y2 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; y2)&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; mx &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; my &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; radius &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; radius;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Method Definition&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;checkOverlap&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; radius, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; xCenter, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; yCenter, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; x1, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; y1, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; x2, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; y2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Defines the `checkOverlap` method, which checks if a rectangle overlaps with a circle. The method takes in the radius and center of the circle, and the coordinates of the rectangle. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Coordinate Adjustment&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x1 &lt;span style=&#34;color:#666&#34;&gt;-=&lt;/span&gt; xCenter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Adjusts the x-coordinate of the bottom-left corner of the rectangle relative to the circle&amp;#39;s center by subtracting the x-coordinate of the circle&amp;#39;s center. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Coordinate Adjustment&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x2 &lt;span style=&#34;color:#666&#34;&gt;-=&lt;/span&gt; xCenter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Adjusts the x-coordinate of the top-right corner of the rectangle relative to the circle&amp;#39;s center. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Coordinate Adjustment&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y1 &lt;span style=&#34;color:#666&#34;&gt;-=&lt;/span&gt; yCenter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Adjusts the y-coordinate of the bottom-left corner of the rectangle relative to the circle&amp;#39;s center. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Coordinate Adjustment&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y2 &lt;span style=&#34;color:#666&#34;&gt;-=&lt;/span&gt; yCenter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Adjusts the y-coordinate of the top-right corner of the rectangle relative to the circle&amp;#39;s center. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Intersection Calculation&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; mx &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x1 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x2 &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; min(x1 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x1, x2 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x2)&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Calculates the minimum squared distance in the x-direction between the center of the circle and the rectangle. If the rectangle extends on both sides of the circle&amp;#39;s center, the minimum distance is used. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;7 : Intersection Calculation&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; my &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; y1 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; y2 &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; min(y1 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; y1, y2 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; y2)&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Calculates the minimum squared distance in the y-direction between the center of the circle and the rectangle. If the rectangle extends on both sides of the circle&amp;#39;s center, the minimum distance is used. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;8 : Return Statement&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; mx &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; my &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; radius &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; radius;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Returns `true` if the total minimum squared distances in both x and y directions are less than or equal to the squared radius of the circle, indicating that the rectangle and circle overlap. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(1), as the circle and rectangle may not overlap at all and the check can terminate quickly.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(1), since the solution involves constant-time calculations for the overlap check.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(1), as the solution performs a fixed set of operations regardless of input size.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; &lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(1), as no additional space is required beyond basic variable storage.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(1), as the space complexity does not grow with input size.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; &lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/circle-and-rectangle-overlapping/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1828: Queries on Number of Points Inside a Circle</title>
      <link>https://www.grid47.xyz/leetcode/solution-1828-queries-on-number-of-points-inside-a-circle/</link>
      <pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-1828-queries-on-number-of-points-inside-a-circle/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are given an array of points, each represented by its coordinates [xi, yi] on a 2D plane. You are also given an array of queries, where each query describes a circle defined by its center at (xj, yj) and its radius rj. For each query, your task is to compute how many points lie inside or on the border of the circle. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; You are given two arrays. The first array, points, consists of pairs of integers where each pair represents the coordinates of a point. The second array, queries, consists of triplets where each triplet represents the center coordinates (xj, yj) and the radius rj of a circle.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; For example, points = [[1,3], [3,3], [5,3], [2,2]] represents 4 points, and queries = [[2,3,1], [4,3,1], [1,1,2]] represents 3 circles.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= points.length &amp;lt;= 500&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • points[i].length == 2&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= xi, yi &amp;lt;= 500&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= queries.length &amp;lt;= 500&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • queries[j].length == 3&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= xj, yj &amp;lt;= 500&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= rj &amp;lt;= 500&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; Return an array of integers where each element is the number of points inside or on the border of the corresponding circle defined in the queries array.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; For points = [[1,3],[3,3],[5,3],[2,2]] and queries = [[2,3,1],[4,3,1],[1,1,2]], the output will be [3, 2, 2], as there are 3 points inside or on the first circle, 2 points inside or on the second, and 2 points inside or on the third circle.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Each answer in the result should be an integer.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; For each query, calculate how many points are inside the circle. The circle includes the points on its border as well.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1. For each query, loop through each point and calculate the squared distance from the point to the center of the circle.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2. If the squared distance is less than or equal to the squared radius, increment the count for that query.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 3. After processing all points for a query, store the count as the result for that query.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; Make sure to handle the queries efficiently within the given constraints of the input sizes.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Each query&amp;#39;s circle must be evaluated for all points in the input array.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The input size can go up to 500 points and 500 queries.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Each point is represented as a pair of integers (xi, yi), and each query as a triplet (xj, yj, rj).&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • A point is considered inside or on the border of the circle if its distance from the center is less than or equal to the radius.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: points = [[1,3], [3,3], [5,3], [2,2]], queries = [[2,3,1], [4,3,1], [1,1,2]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The first circle is centered at (2,3) with radius 1, which includes the points [1,3], [2,2], and [3,3], so the answer is 3. The second circle at (4,3) with radius 1 includes points [3,3] and [5,3], so the answer is 2. The third circle at (1,1) with radius 2 includes points [1,3] and [2,2], so the answer is 2.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: points = [[1,1], [2,2], [3,3], [4,4], [5,5]], queries = [[1,2,2], [2,2,2], [4,3,2], [4,3,3]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The first circle includes the points [1,1] and [2,2], so the answer is 2. The second circle includes [1,1], [2,2], and [3,3], so the answer is 3. The third circle includes [4,4] and [5,5], so the answer is 2. The fourth circle includes all points, so the answer is 4.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; We can solve this problem by checking each point for each query, calculating the distance to the center of the circle, and counting how many points fall inside the circle.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • A point is inside or on the border of the circle if the squared distance from the point to the center is less than or equal to the squared radius of the circle.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The brute force solution checks each point against every query, which results in O(n * q) time complexity, where n is the number of points and q is the number of queries.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1. For each query, initialize a counter to track the number of points inside the circle.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2. For each point, calculate the squared distance from the center of the circle to the point.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 3. If the squared distance is less than or equal to the square of the radius, increment the counter.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 4. After processing all points for a query, add the count to the result list.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If no points are provided, the result should be an array of zeros.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If the number of points and queries is large (up to 500 each), ensure the algorithm can handle the maximum input size.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If all points are identical, consider that all queries should include these points based on their radius.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure the solution handles large values efficiently within the given time limits.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Class Definition&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Typedef Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Public Access Modifier&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Function Definition&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Result Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Loop Through Queries&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;7&#34;&gt; 7 Query Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;8&#34;&gt; 8 Loop Through Points&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;9&#34;&gt; 9 Distance Check&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;10&#34;&gt; 10 Store Result&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;11&#34;&gt; 11 Return Result&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Solution&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;typedef&lt;/span&gt; vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; mo;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; countPoints(mo&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; pts, mo&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; qrs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a0a000&#34;&gt;q&lt;/span&gt;: qrs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, rr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; q[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; q[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a0a000&#34;&gt;p&lt;/span&gt;: pts)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cnt &lt;span style=&#34;color:#666&#34;&gt;+=&lt;/span&gt; (q[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; p[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (q[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; p[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; (q[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; p[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (q[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; p[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; rr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        res.push_back(cnt);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Class Definition&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Solution&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Defines the `Solution` class, which contains the method `countPoints` to solve the problem. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Typedef Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;typedef&lt;/span&gt; vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; mo;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line defines a shorthand type `mo` for a 2D vector of integers. It is used to represent both the list of points and queries in the method. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Public Access Modifier&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Marks the start of the public section of the class, where methods are accessible outside the class. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Function Definition&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; countPoints(mo&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; pts, mo&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; qrs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Defines the function `countPoints`, which takes two 2D vectors: `pts` (points) and `qrs` (queries). It returns a vector of integers representing the count of points within the radius for each query. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Result Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Initializes an empty vector `res` to store the result: the count of points inside each query&amp;#39;s circle. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Loop Through Queries&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a0a000&#34;&gt;q&lt;/span&gt;: qrs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Begins a loop to iterate through each query in `qrs`. Each query represents a circle defined by its center coordinates and radius. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;7 : Query Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, rr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; q[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; q[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Initializes `cnt` to 0 to count the points within the circle and calculates `rr`, the square of the radius (radius squared) for distance comparison. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;8 : Loop Through Points&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a0a000&#34;&gt;p&lt;/span&gt;: pts)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Starts a nested loop to iterate over each point in the `pts` vector. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;9 : Distance Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cnt &lt;span style=&#34;color:#666&#34;&gt;+=&lt;/span&gt; (q[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; p[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (q[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; p[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; (q[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; p[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (q[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; p[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; rr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; For each point `p`, this line calculates the squared distance between the point and the center of the query circle. If the squared distance is less than or equal to `rr`, it increments the count `cnt`. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;10 : Store Result&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        res.push_back(cnt);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; After checking all points for the current query, the count of points within the circle (`cnt`) is added to the result vector `res`. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;11 : Return Result&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Returns the result vector `res` containing the counts of points within each query circle. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n * q) when the points are sparse and the circles have small radii.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(n * q), where n is the number of points and q is the number of queries.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n * q), which occurs when every point must be checked for every query.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The time complexity is O(n * q) because we are iterating over each query and checking each point.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n &amp;#43; q), which is required to store the points and queries.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n &amp;#43; q), which is required to store the points and the queries.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The space complexity is O(n &amp;#43; q) because we store both the points and queries arrays.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/queries-on-number-of-points-inside-a-circle/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 2101: Detonate the Maximum Bombs</title>
      <link>https://www.grid47.xyz/leetcode/solution-2101-detonate-the-maximum-bombs/</link>
      <pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-2101-detonate-the-maximum-bombs/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are given a list of bombs represented by a 2D array &amp;lsquo;bombs&amp;rsquo; where each bomb is described by three integers: [xi, yi, ri]. xi and yi denote the X and Y coordinates of the bomb, while ri is its blast radius. Your task is to find the maximum number of bombs that can be detonated by initiating a detonation of one bomb. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; The input consists of a 2D integer array &amp;#39;bombs&amp;#39; where each element represents a bomb. Each bomb is defined by three integers: the X-coordinate, Y-coordinate, and blast radius of the bomb.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; bombs = [[1, 1, 3], [4, 1, 3]]&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= bombs.length &amp;lt;= 100&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • bombs[i].length == 3&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= xi, yi, ri &amp;lt;= 10^5&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; Return the maximum number of bombs that can be detonated by initiating the detonation of one bomb.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Output: 2&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The goal is to calculate the maximum number of bombs that can be detonated starting from any bomb, considering the chain reaction that may happen.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1. For each bomb, calculate the range of bombs that it can detonate based on its blast radius.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2. Perform a DFS (Depth-First Search) to find how many bombs can be detonated if the current bomb is detonated.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 3. Track the maximum number of detonated bombs for all possible starting bombs.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The constraints are set to ensure the problem can be solved in a reasonable time frame.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= bombs.length &amp;lt;= 100&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • bombs[i].length == 3&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= xi, yi, ri &amp;lt;= 10^5&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • All bombs have circular blast ranges.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • A bomb can only detonate another bomb if it lies within its blast radius.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: bombs = [[1, 1, 3], [4, 1, 3]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; If you detonate the first bomb, it will only detonate itself. If you detonate the second bomb, both bombs will detonate because their blast radii overlap.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; The approach to solving this problem involves calculating the bombs affected by detonating any given bomb and tracking the maximum chain reaction.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The problem essentially boils down to a graph traversal problem where bombs are connected based on their blast ranges.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • By modeling the bombs as nodes in a graph, with edges representing detonations, we can perform a DFS to find the maximum chain reaction.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1. Construct a graph where each node represents a bomb.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2. For each bomb, check if it lies within the range of another bomb.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 3. Perform DFS from each bomb to count the total detonated bombs, and track the maximum count.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Handle the case where the input array is empty (though the problem guarantees at least 1 bomb).&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure that the solution handles up to 100 bombs efficiently.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Handle cases where bombs are far apart or have no overlapping ranges.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The constraints ensure that the problem can be solved in O(n^2) time, given that n &amp;lt;= 100.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Code Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Code Setup&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Access Control&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Function Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Variable Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Graph Setup&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;7&#34;&gt; 7 Graph Construction&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;8&#34;&gt; 8 Bomb Coordinate Extraction&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;9&#34;&gt; 9 Bomb Coordinate Extraction&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;10&#34;&gt; 10 Bomb Radius Extraction&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;11&#34;&gt; 11 Connection Checking&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;12&#34;&gt; 12 Condition Check&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;13&#34;&gt; 13 Distance Calculation&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;14&#34;&gt; 14 Distance Calculation&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;15&#34;&gt; 15 Condition Check&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;16&#34;&gt; 16 Graph Update&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;17&#34;&gt; 17 Variable Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;18&#34;&gt; 18 Loop for Result Calculation&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;19&#34;&gt; 19 Counter Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;20&#34;&gt; 20 Visited Flags Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;21&#34;&gt; 21 DFS Call&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;22&#34;&gt; 22 Result Update&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;23&#34;&gt; 23 Return Statement&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;24&#34;&gt; 24 DFS Function Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;25&#34;&gt; 25 Base Case Check&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;26&#34;&gt; 26 Mark as Visited&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;27&#34;&gt; 27 Increment Counter&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;28&#34;&gt; 28 DFS Recursive Call&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;29&#34;&gt; 29 Recursive DFS Call&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Solution&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080&#34;&gt;#define ll long long int&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; maximumDetonation(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; bombs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bombs.size();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; gph(n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ll x1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bombs[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ll y1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bombs[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ll r1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bombs[i][&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; j&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(i &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; j) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ll x2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; abs(x1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; bombs[j][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ll y2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; abs(y1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; bombs[j][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(x2 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x2 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; y2 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; y2 &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; r1 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    gph[i].push_back(j);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; INT_MIN;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; vistd(n, &lt;span style=&#34;color:#a2f&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(gph, vistd, c, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; max(ans, c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;dfs&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;gph, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;vstd, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;c, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(vstd[i]) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vstd[i] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a2f&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;j&lt;/span&gt;: gph[i])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;vstd[j])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(gph, vstd, c, j);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Code Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Solution&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Declares the Solution class that contains the solution method. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Code Setup&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080&#34;&gt;#define ll long long int&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Defines &amp;#39;ll&amp;#39; as a shorthand for long long integer type to handle large numbers. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Access Control&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Specifies the public access modifier for methods that follow, making them accessible outside the class. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Function Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;maximumDetonation&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; bombs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Declares the &amp;#39;maximumDetonation&amp;#39; function which takes a 2D vector of bomb coordinates and returns the maximum number of detonations. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Variable Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bombs.size();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Initializes the variable &amp;#39;n&amp;#39; to the number of bombs in the input vector. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Graph Setup&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; gph(n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Creates a graph represented by an adjacency list where each bomb&amp;#39;s connections are stored. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;7 : Graph Construction&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Starts a loop to iterate through each bomb to build the graph of connections based on detonation range. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;8 : Bomb Coordinate Extraction&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ll x1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bombs[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Extracts the x-coordinate of the ith bomb. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;9 : Bomb Coordinate Extraction&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ll y1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bombs[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Extracts the y-coordinate of the ith bomb. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;10 : Bomb Radius Extraction&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ll r1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bombs[i][&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Extracts the radius of detonation for the ith bomb. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;11 : Connection Checking&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; j&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Starts a loop to check for potential connections between the ith bomb and all other bombs. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;12 : Condition Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(i &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; j) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Ensures that the bomb is not checking itself for a connection. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;13 : Distance Calculation&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ll x2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; abs(x1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; bombs[j][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Calculates the horizontal distance between the two bombs. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;14 : Distance Calculation&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ll y2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; abs(y1 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; bombs[j][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Calculates the vertical distance between the two bombs. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;15 : Condition Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(x2 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x2 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; y2 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; y2 &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; r1 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Checks if the second bomb lies within the detonation radius of the first bomb. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;16 : Graph Update&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    gph[i].push_back(j);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Adds the second bomb as a neighbor in the graph of the first bomb, indicating a potential detonation. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;17 : Variable Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; INT_MIN;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Initializes the variable &amp;#39;ans&amp;#39; to store the maximum detonation count, starting with a very low value. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;18 : Loop for Result Calculation&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Starts a loop to process each bomb and calculate its potential detonation result. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;19 : Counter Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Initializes a counter variable &amp;#39;c&amp;#39; to count the number of detonations for the current bomb. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;20 : Visited Flags Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; vistd(n, &lt;span style=&#34;color:#a2f&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Initializes a vector to track which bombs have been visited during the DFS traversal. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;21 : DFS Call&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(gph, vistd, c, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Calls the depth-first search function to explore all detonations that start from the ith bomb. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;22 : Result Update&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; max(ans, c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Updates the maximum detonation result &amp;#39;ans&amp;#39; based on the count &amp;#39;c&amp;#39; for the current bomb. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;23 : Return Statement&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Returns the maximum number of detonations from the function. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;24 : DFS Function Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;dfs&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;gph, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;vstd, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;c, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Declares the depth-first search function that explores all reachable bombs from a starting bomb. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;25 : Base Case Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(vstd[i]) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Checks if the bomb has already been visited, and if so, returns to avoid redundant processing. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;26 : Mark as Visited&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vstd[i] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a2f&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Marks the current bomb as visited to prevent revisiting it. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;27 : Increment Counter&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Increments the detonation counter for the current bomb. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;28 : DFS Recursive Call&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;j&lt;/span&gt;: gph[i])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Loops over all bombs that can be detonated from the current bomb. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;29 : Recursive DFS Call&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;vstd[j])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            dfs(gph, vstd, c, j);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Recursively calls DFS for each unvisited bomb connected to the current bomb. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n^2)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(n^2)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n^2)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; In the worst case, we need to check the blast range for each pair of bombs, leading to O(n^2) time complexity.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n^2)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; We store a graph representation of the bomb interactions, which takes O(n^2) space in the worst case.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/detonate-the-maximum-bombs/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 2249: Count Lattice Points Inside a Circle</title>
      <link>https://www.grid47.xyz/leetcode/solution-2249-count-lattice-points-inside-a-circle/</link>
      <pubDate>Wed, 27 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-2249-count-lattice-points-inside-a-circle/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are given a 2D integer array &lt;code&gt;circles&lt;/code&gt;, where each element &lt;code&gt;circles[i] = [xi, yi, ri]&lt;/code&gt; represents a circle with center at &lt;code&gt;(xi, yi)&lt;/code&gt; and radius &lt;code&gt;ri&lt;/code&gt;. The task is to find the number of lattice points that lie inside at least one of the given circles. A lattice point is defined as a point with integer coordinates, and points lying on the circumference of a circle are also considered inside. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; The input consists of a list of circles, where each circle is defined by its center coordinates and radius.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; circles = [[3, 4, 2], [6, 7, 1]]&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= circles.length &amp;lt;= 200&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • circles[i].length == 3&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= xi, yi &amp;lt;= 100&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= ri &amp;lt;= min(xi, yi)&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; Return an integer representing the number of distinct lattice points inside at least one circle.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Output: 14&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; Count the distinct lattice points that are inside or on the circumference of at least one of the given circles.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Iterate through each circle in the input.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • For each circle, iterate through all points in the bounding square defined by the circle&amp;#39;s radius.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Check whether each point lies inside or on the circle using the distance formula.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Use a data structure like a set to keep track of unique lattice points.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; Ensure that all operations respect the bounds of the input size and circle radius.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Number of circles does not exceed 200.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • All coordinates and radius values are within the specified range.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Circle centers and radii are positive integers.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The grid is large enough to accommodate all specified circles.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; circles = [[3, 3, 2]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The circle with center (3, 3) and radius 2 includes lattice points (1, 3), (2, 2), (2, 3), (2, 4), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 2), (4, 3), (4, 4), (5, 3). The total count is 13.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; circles = [[2, 2, 1], [4, 4, 1]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The circles include lattice points (1, 2), (2, 1), (2, 2), (2, 3), (3, 2), (3, 4), (4, 3), (4, 4), (4, 5), (5, 4). After merging overlapping points, the total count is 10.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; Use brute-force bounding box iteration for each circle and a set to ensure unique points.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • A lattice point inside or on a circle satisfies the equation (x - xi)^2 &amp;#43; (y - yi)^2 &amp;lt;= ri^2.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Overlap between circles requires merging results to avoid duplicate counts.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Using a set data structure ensures that duplicate lattice points are not counted multiple times.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Iterate over each circle and determine its bounding box as [xi - ri, xi &amp;#43; ri] x [yi - ri, yi &amp;#43; ri].&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Check each point in the bounding box to see if it lies inside or on the circle using the circle equation.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Store each valid point in a set.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Return the size of the set as the final result.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • No circles are provided; return 0.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Handle up to 200 circles with maximum radius efficiently.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Circles with a radius of 1 will include only the center and nearby lattice points.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Bounding box iteration should remain within computational limits for given constraints.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Definition&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Variable Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Loop Through Circles&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Loop Through x-coordinates&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Loop Through y-coordinates&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Point Inside Circle Check&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;7&#34;&gt; 7 Insert Point&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;8&#34;&gt; 8 Return Unique Count&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;countLatticePoints&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; cir) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; cnt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;it&lt;/span&gt;: cir) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;]; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;]; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;]; j &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;]; j&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;)                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;((i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; (j &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (j &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; (it[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                cnt.insert(i &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; j);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; cnt.size();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Definition&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;countLatticePoints&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; cir) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This is the start of the &amp;#39;countLatticePoints&amp;#39; function, which takes a vector of circles (defined by their center coordinates and radius) and calculates the number of unique lattice points contained within these circles. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Variable Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; cnt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; A set &amp;#39;cnt&amp;#39; is declared to store unique lattice points. The set ensures that duplicate points are automatically handled. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Loop Through Circles&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;it&lt;/span&gt;: cir) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This loop iterates over each circle in the &amp;#39;cir&amp;#39; vector. Each circle is represented by a vector with its center (x, y) and radius. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Loop Through x-coordinates&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;]; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;]; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This loop iterates over the x-coordinates that might lie within the circle, considering the range from the leftmost to the rightmost points based on the center&amp;#39;s x-coordinate and radius. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Loop Through y-coordinates&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;]; j &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;]; j&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;)                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This loop iterates over the y-coordinates that might lie within the circle, considering the range from the bottommost to the topmost points based on the center&amp;#39;s y-coordinate and radius. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Point Inside Circle Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;((i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; (j &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (j &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; (it[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; it[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line checks whether the point (i, j) lies inside the circle. The condition is derived from the equation of a circle, where the sum of the squares of the differences in coordinates must be less than or equal to the square of the radius. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;7 : Insert Point&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                cnt.insert(i &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; j);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; If the point (i, j) lies inside the circle, it is inserted into the &amp;#39;cnt&amp;#39; set. The points are stored as a unique identifier by combining the x and y coordinates. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;8 : Return Unique Count&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; cnt.size();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Returns the size of the set &amp;#39;cnt&amp;#39;, which represents the number of unique lattice points that lie within the given circles. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n * r^2)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(n * r^2)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n * r^2)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; Each circle&amp;#39;s bounding box involves iterating over r^2 points, where n is the number of circles.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(m)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(m)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The space complexity is determined by the number of unique lattice points m.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/count-lattice-points-inside-a-circle/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 2280: Minimum Lines to Represent a Line Chart</title>
      <link>https://www.grid47.xyz/leetcode/solution-2280-minimum-lines-to-represent-a-line-chart/</link>
      <pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-2280-minimum-lines-to-represent-a-line-chart/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are given a list of stock prices where each element represents the stock price on a specific day. The stock prices are given as pairs where the first element is the day number and the second element is the stock price for that day. A line chart can be drawn by plotting these prices on an XY-plane, where the X-axis represents the day and the Y-axis represents the price. Your task is to determine the minimum number of lines required to represent the stock prices as a continuous line chart. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; The input is a 2D array `stockPrices` where each element `stockPrices[i] = [day_i, price_i]` represents the stock price on `day_i` with a price of `price_i`.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Input: stockPrices = [[1, 10], [2, 15], [3, 12], [4, 18], [5, 20]]&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= stockPrices.length &amp;lt;= 10^5&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • stockPrices[i].length == 2&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= day_i, price_i &amp;lt;= 10^9&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • All day_i are distinct.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; The output is an integer representing the minimum number of lines needed to represent the stock price chart.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Output: 2&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The goal is to calculate the minimum number of straight lines that can connect all the stock prices by determining if the points lie on the same straight line.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Sort the stock prices by the day.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Iterate through the stock prices and check if each consecutive pair lies on the same line as the previous pair.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If a new line is required, increment the count.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The solution needs to handle up to 100,000 stock prices efficiently.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Stock prices will be provided in unsorted order, so sorting is required.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: stockPrices = [[1, 7], [2, 6], [3, 5], [4, 4], [5, 4], [6, 3], [7, 2], [8, 1]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The stock prices need 3 lines to be represented. The first line connects points (1, 7) to (4, 4). The second line connects (4, 4) to (5, 4), and the third line connects (5, 4) to (8, 1).&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: stockPrices = [[1, 3], [2, 5], [3, 7], [4, 9], [5, 11]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The stock prices form a single line where the price increases uniformly. Therefore, only one line is needed to represent the chart.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; The approach involves iterating over the stock prices and checking if consecutive points lie on the same straight line. A new line is needed whenever the slope between consecutive points changes.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • This problem can be solved efficiently by analyzing the slope between consecutive points and checking if they remain constant.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Sorting the stock prices will help simplify checking consecutive points. The main task is to check if each consecutive triplet of points lies on the same straight line.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Sort the input array of stock prices by day.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Start with one line, and check if consecutive points lie on the same line by comparing the slopes between them.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If the slope changes, start a new line and increment the line count.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The input is always non-empty since stockPrices.length is at least 1.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The solution should handle up to 100,000 stock prices efficiently.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If all prices are the same, only one line is required.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Sorting is O(n log n), and the overall complexity should not exceed O(n log n).&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Sort Points&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Initialize Variables&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Early Exit&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Loop Over Points&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Extract Points&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;7&#34;&gt; 7 Extract Points (y-coordinates)&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;8&#34;&gt; 8 Calculate Slope Differences&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;9&#34;&gt; 9 Calculate Slope Differences (cont.)&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;10&#34;&gt; 10 Check Slopes&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;11&#34;&gt; 11 Return Statement&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;minimumLines&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; stk) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sort(stk.begin(), stk.end());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stk.size();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;long&lt;/span&gt; x1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stk[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], x2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stk[i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], x3 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stk[i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;long&lt;/span&gt; y1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stk[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], y2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stk[i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], y3 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stk[i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;long&lt;/span&gt; diff1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (y3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; y2) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (x2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;long&lt;/span&gt; diff2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (y2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; y1) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; (diff1 &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; diff2) res&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;minimumLines&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; stk) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; The function header for `minimumLines` which takes a vector of vectors `stk` representing a list of points (each point is a pair of coordinates), and returns the minimum number of lines required to connect these points. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Sort Points&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sort(stk.begin(), stk.end());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line sorts the vector `stk` in ascending order of points, which is essential to efficiently compare consecutive points and check if they lie on the same line. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Initialize Variables&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stk.size();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Here, we initialize `res` to 1 (as at least one line is needed) and `n` to the number of points in `stk`. If there are fewer than 2 points, no line is needed, so the function would return 0. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Early Exit&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; If there are fewer than two points, no lines can be drawn, so the function returns 0. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Loop Over Points&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This `for` loop starts from index 2 and iterates over the points to compare triplets of points to check if they lie on the same line. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Extract Points&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;long&lt;/span&gt; x1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stk[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], x2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stk[i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], x3 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stk[i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; These lines extract the x-coordinates of the current point (`x1`), the previous point (`x2`), and the point before that (`x3`) to check the slope between these points. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;7 : Extract Points (y-coordinates)&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;long&lt;/span&gt; y1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stk[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], y2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stk[i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], y3 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stk[i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Similarly, these lines extract the y-coordinates (`y1`, `y2`, and `y3`) of the current, previous, and second previous points. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;8 : Calculate Slope Differences&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;long&lt;/span&gt; diff1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (y3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; y2) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (x2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This calculates the first slope difference, which represents the difference in slopes between the last two points (`x1, y1` and `x2, y2`). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;9 : Calculate Slope Differences (cont.)&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;long&lt;/span&gt; diff2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (y2 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; y1) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; (x3 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This calculates the second slope difference, representing the difference in slopes between the second and third points (`x2, y2` and `x3, y3`). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;10 : Check Slopes&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; (diff1 &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; diff2) res&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; If the two slope differences (`diff1` and `diff2`) are not equal, this means the three points do not lie on the same straight line, so the result counter `res` is incremented. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;11 : Return Statement&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Finally, the function returns the number of lines required to connect the points. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n log n)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(n log n)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n log n)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The time complexity is O(n log n) due to the sorting of the stock prices.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The space complexity is O(n) for storing the sorted stock prices.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-lines-to-represent-a-line-chart/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 2481: Minimum Cuts to Divide a Circle</title>
      <link>https://www.grid47.xyz/leetcode/solution-2481-minimum-cuts-to-divide-a-circle/</link>
      <pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-2481-minimum-cuts-to-divide-a-circle/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are given a circle, and you need to divide it into &amp;rsquo;n&amp;rsquo; equal slices using the minimum number of straight cuts. A valid cut can either be through the center of the circle touching two points on the edge or touching just one point and the center. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; The input is a single integer, n, which represents the number of slices the circle should be divided into.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; n = 6&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= n &amp;lt;= 100&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; Return the minimum number of cuts needed to divide the circle into &amp;#39;n&amp;#39; equal slices.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Output: 3&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The output should be a single integer representing the minimum cuts needed.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The goal is to determine the fewest number of cuts needed to divide a circle into exactly &amp;#39;n&amp;#39; equal parts using valid cuts.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If n is 1, no cuts are required.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • For even numbers, cuts can be made in half, and for odd numbers, each cut should be made to increase the number of equal slices incrementally.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; You are guaranteed that 1 &amp;lt;= n &amp;lt;= 100.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= n &amp;lt;= 100&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The circle is perfectly symmetric, and the goal is to divide it into equal slices.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Example 2: n = 5&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; Since 5 is an odd number, 5 cuts are needed to divide the circle into 5 equal parts, as no other number of cuts can evenly divide it.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; The solution involves calculating the minimum number of cuts based on whether the number of slices is odd or even.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If n is even, a smaller number of cuts can be used by cutting through the center of the circle symmetrically.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If n is odd, each cut must be added incrementally to get the required number of slices.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • For even values of n, the answer is n/2. For odd values of n, the answer is simply n.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Check if n is 1. If true, return 0 cuts.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If n is even, return n / 2 as the minimum cuts.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If n is odd, return n as the minimum cuts.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • n will always be greater than or equal to 1, so no empty inputs are possible.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The largest value for n is 100, which is manageable in terms of time complexity.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If n = 1, no cuts are needed.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure that n always falls within the bounds of 1 to 100.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Base Case&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Return Statement&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;numberOfCuts&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; n &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;n&lt;/span&gt; : n &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;numberOfCuts&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This is the declaration of the function `numberOfCuts`, which takes an integer `n` as input and returns the number of cuts (an integer) needed to divide `n` into pieces. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Base Case&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Checks if `n` is 1. If it is, no cuts are needed, so the function returns 0. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Return Statement&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; n &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;n&lt;/span&gt; : n &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; If `n` is odd, the function returns `n` itself (since no further division is possible). If `n` is even, it returns `n / 2`, indicating that the number of cuts required is half of `n`. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(1)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(1)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(1)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The time complexity is O(1) since we are simply performing a constant-time check on whether n is odd or even.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(1)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(1)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The space complexity is O(1) because we only use a constant amount of space for the computation.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-cuts-to-divide-a-circle/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
