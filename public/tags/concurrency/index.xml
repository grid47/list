<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concurrency on grid47</title>
    <link>http://localhost:1313/tags/concurrency/</link>
    <description>Recent content in Concurrency on grid47</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>www.grid47.com - All rights reserved</copyright>
    <lastBuildDate>Wed, 06 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 1114: Print in Order</title>
      <link>http://localhost:1313/leetcode/solution-1114-print-in-order/</link>
      <pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-1114-print-in-order/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;You are given a class with three methods: &lt;code&gt;first()&lt;/code&gt;, &lt;code&gt;second()&lt;/code&gt;, and &lt;code&gt;third()&lt;/code&gt;. These methods are called concurrently by three threads. The goal is to ensure that &lt;code&gt;second()&lt;/code&gt; is executed only after &lt;code&gt;first()&lt;/code&gt; has been executed, and &lt;code&gt;third()&lt;/code&gt; is executed only after &lt;code&gt;second()&lt;/code&gt; has been executed. The execution of these methods is asynchronous, and you need to design a mechanism that guarantees the correct order of execution regardless of the operating system&amp;rsquo;s thread scheduling.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1115: Print FooBar Alternately</title>
      <link>http://localhost:1313/leetcode/solution-1115-print-foobar-alternately/</link>
      <pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-1115-print-foobar-alternately/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;You are given a class &lt;code&gt;FooBar&lt;/code&gt; with two methods: &lt;code&gt;foo()&lt;/code&gt; and &lt;code&gt;bar()&lt;/code&gt;. These methods are called concurrently by two threads. One thread calls &lt;code&gt;foo()&lt;/code&gt; while the other calls &lt;code&gt;bar()&lt;/code&gt;. You need to modify the program to ensure that the output alternates between &amp;lsquo;foo&amp;rsquo; and &amp;lsquo;bar&amp;rsquo;, and &amp;lsquo;foobar&amp;rsquo; is printed exactly &lt;code&gt;n&lt;/code&gt; times. The threads should alternate their execution such that &lt;code&gt;foo()&lt;/code&gt; is printed first, followed by &lt;code&gt;bar()&lt;/code&gt;, and this pattern should continue for &lt;code&gt;n&lt;/code&gt; times.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1116: Print Zero Even Odd</title>
      <link>http://localhost:1313/leetcode/solution-1116-print-zero-even-odd/</link>
      <pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-1116-print-zero-even-odd/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;You are given an instance of the class &lt;code&gt;ZeroEvenOdd&lt;/code&gt;, which contains three functions: &lt;code&gt;zero&lt;/code&gt;, &lt;code&gt;even&lt;/code&gt;, and &lt;code&gt;odd&lt;/code&gt;. The same instance of &lt;code&gt;ZeroEvenOdd&lt;/code&gt; is passed to three different threads. Thread A calls &lt;code&gt;zero()&lt;/code&gt; to print zeros, thread B calls &lt;code&gt;even()&lt;/code&gt; to print even numbers, and thread C calls &lt;code&gt;odd()&lt;/code&gt; to print odd numbers. The goal is to output a sequence of numbers in the order: 0, 1, 2, 3, &amp;hellip;, 2n, where n is the given number, and the length of the sequence is &lt;code&gt;2n&lt;/code&gt;. The threads should execute asynchronously, ensuring that the sequence is printed correctly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1195: Fizz Buzz Multithreaded</title>
      <link>http://localhost:1313/leetcode/solution-1195-fizz-buzz-multithreaded/</link>
      <pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-1195-fizz-buzz-multithreaded/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;You are given a class &lt;code&gt;FizzBuzz&lt;/code&gt; that has four methods: &lt;code&gt;fizz()&lt;/code&gt;, &lt;code&gt;buzz()&lt;/code&gt;, &lt;code&gt;fizzbuzz()&lt;/code&gt;, and &lt;code&gt;number()&lt;/code&gt;. These methods are executed by four different threads. The goal is to output a sequence of numbers from 1 to &lt;code&gt;n&lt;/code&gt; with special rules: if the number is divisible by 3 and 5, print &amp;lsquo;fizzbuzz&amp;rsquo;; if divisible by 3 but not 5, print &amp;lsquo;fizz&amp;rsquo;; if divisible by 5 but not 3, print &amp;lsquo;buzz&amp;rsquo;; otherwise, print the number.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1226: The Dining Philosophers</title>
      <link>http://localhost:1313/leetcode/solution-1226-the-dining-philosophers/</link>
      <pubDate>Sun, 07 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-1226-the-dining-philosophers/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Five philosophers sit at a round table with bowls of spaghetti. Each philosopher alternates between thinking and eating. A philosopher can only eat when both their left and right forks are available. Design a system where no philosopher will starve and they can continue alternating between eating and thinking.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
