<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shortest Path on grid47</title>
    <link>https://www.grid47.xyz/tags/shortest-path/</link>
    <description>Recent content in Shortest Path on grid47</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>www.grid47.com - All rights reserved</copyright>
    <lastBuildDate>Wed, 06 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.grid47.xyz/tags/shortest-path/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 399: Evaluate Division</title>
      <link>https://www.grid47.xyz/leetcode/solution-399-evaluate-division/</link>
      <pubDate>Sat, 28 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-399-evaluate-division/</guid>
      <description>&lt;h2 id=&#34;hahahugoshortcode1116s0hbhb&#34;&gt;&lt;figure class=&#34;remote-image&#34; style=&#34;text-align:center; margin: 0;&#34;&gt;&#xA;    &lt;div style=&#34;position: relative; width:900px; max-width:100%; padding-bottom:56.25%; overflow: hidden; border-radius:0px;&#34;&gt;&#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/grid47/list-images/refs/heads/main/list/399.webp&#34; &#xA;           alt=&#34;A set of equations forming a division problem, with the answer softly glowing as it is calculated.&#34; &#xA;           style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;      &lt;figcaption style=&#34;font-size: 0.5em; font-weight: 300; color:#555; margin-top: 4px; line-height: 1.2;&#34;&gt;&#xA;        Solution to LeetCode 399: Evaluate Division Problem&#xA;      &lt;/figcaption&gt;&#xA;    &#xA;  &lt;/figure&gt;&#xA;  &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are given a list of equations and their corresponding values, where each equation represents a division between two variables. Your task is to determine the result of several queries asking for the division result of two given variables. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; You are given two lists: `equations` representing division relations and `values` representing the results of those divisions. You are also given a list of `queries` that you need to evaluate.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Input: equations = [[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;], [&amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]], values = [2.0, 3.0], queries = [[&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;], [&amp;#39;b&amp;#39;, &amp;#39;a&amp;#39;]]&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= equations.length &amp;lt;= 20&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= queries.length &amp;lt;= 20&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Each equation contains two strings with lengths from 1 to 5.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; For each query, return the result of the division if it can be determined, otherwise return -1.0.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Output: [6.0, 0.5, -1.0, 1.0, -1.0]&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The division is guaranteed to be valid for each equation.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Queries asking for divisions between undefined variables must return -1.0.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; Use depth-first search (DFS) to explore possible paths in the graph and compute the result of each query.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Construct a graph where each variable is a node, and each equation provides an edge with a weight representing the division result.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • For each query, use DFS to explore the graph from the starting node (variable) to the target node and compute the division result along the path.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; Ensure that there are no contradictions in the input equations and that division by zero does not occur.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The variables in queries must be part of the equations provided.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • All equations are valid and there are no contradictions.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Evaluating queries will not result in division by zero.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; For the equations [[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;], [&amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]] and values [2.0, 3.0], the query [&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;] will return 6.0 because a / b = 2 and b / c = 3, so a / c = 2 * 3 = 6.&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; We first find the direct relations between variables and then use those relations to compute the result for each query.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; The problem can be approached by constructing a graph from the equations, where each node represents a variable, and each edge represents a division relation. DFS is then used to traverse the graph to find answers to the queries.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Equations form a graph structure, with variables as nodes and division results as edge weights.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • We need to perform DFS to explore possible paths and compute the result for each query.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1. Build a graph of variables with their corresponding division results.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2. For each query, perform DFS to compute the result, keeping track of visited nodes to avoid cycles.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Queries for undefined variables should return -1.0.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Handle large numbers of equations and queries efficiently.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Return -1.0 for queries involving variables that do not appear in the equations.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Queries involving variables not present in the equations are invalid and should return -1.0.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Definition&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Graph Representation&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Graph Construction&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Graph Construction&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Graph Construction&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Edge Case Handling&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;7&#34;&gt; 7 Graph Construction&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;8&#34;&gt; 8 Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;9&#34;&gt; 9 Query Loop&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;10&#34;&gt; 10 Visited Set&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;11&#34;&gt; 11 DFS Call&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;12&#34;&gt; 12 Edge Case Handling&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;13&#34;&gt; 13 Store Result&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;14&#34;&gt; 14 Return Result&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;15&#34;&gt; 15 DFS Function&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;16&#34;&gt; 16 DFS Base Case&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;17&#34;&gt; 17 Mark Visited&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;18&#34;&gt; 18 DFS Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;19&#34;&gt; 19 DFS Traversal&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;20&#34;&gt; 20 DFS Pruning&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;21&#34;&gt; 21 Recursive DFS&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;22&#34;&gt; 22 DFS Result Check&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;23&#34;&gt; 23 Return Result&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;24&#34;&gt; 24 Return Default&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; calcEquation(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; eqn, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; val, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; q) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    map&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; graph;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; eqn.size(); i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; w &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; val[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        graph[eqn[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]].push_back(make_pair(eqn[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], w));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; (w &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        graph[eqn[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]].push_back(make_pair(eqn[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; w));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; q.size(); i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        set&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; vis;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; dfs(q[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], q[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], vis, graph);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ans.push_back(res);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;dfs&lt;/span&gt;(string start, string end, set&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;vis, map&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;gph) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(start &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; end) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; gph.count(start)&lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vis.insert(start);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; ans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;x&lt;/span&gt;: gph[start]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(vis.count(x.first)) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x.second &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; dfs(x.first, end, vis, gph);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Definition&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; calcEquation(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; eqn, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; val, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; q) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Define the main function `calcEquation` that takes the list of equations (`eqn`), their corresponding values (`val`), and queries (`q`) as input. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Graph Representation&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    map&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; graph;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Create a graph to represent the equations where each node is a string (variable) and each edge is a pair (connected variable and the corresponding value). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Graph Construction&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; eqn.size(); i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Loop through the list of equations to build the graph with the given relationships between variables. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Graph Construction&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; w &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; val[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Extract the weight (value) associated with the current equation. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Graph Construction&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        graph[eqn[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]].push_back(make_pair(eqn[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], w));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; For each equation, add the relationship between the first variable and the second variable with the corresponding value to the graph. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Edge Case Handling&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; (w &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Skip equations where the value is zero to avoid division by zero. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;7 : Graph Construction&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        graph[eqn[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]].push_back(make_pair(eqn[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; w));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Add the inverse relationship to the graph for the second variable. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;8 : Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Initialize a vector `ans` to store the results of the queries. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;9 : Query Loop&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; q.size(); i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Loop through the queries to calculate the result for each pair of variables. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;10 : Visited Set&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        set&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; vis;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Create a set `vis` to keep track of visited nodes (variables) during the DFS traversal. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;11 : DFS Call&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; dfs(q[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], q[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], vis, graph);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Call the `dfs` function to compute the result of the query. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;12 : Edge Case Handling&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; If the result is negative (meaning no path was found), set the result to -1. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;13 : Store Result&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ans.push_back(res);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Store the result of the query in the `ans` vector. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;14 : Return Result&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Return the vector `ans` containing the results of all queries. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;15 : DFS Function&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;dfs&lt;/span&gt;(string start, string end, set&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;vis, map&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;gph) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Define the `dfs` function that performs a depth-first search to find the path between two variables. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;16 : DFS Base Case&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(start &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; end) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; gph.count(start)&lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; If the start and end variables are the same, return 1 if the variable exists in the graph, or -1 if not. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;17 : Mark Visited&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vis.insert(start);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Mark the current node (variable) as visited. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;18 : DFS Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; ans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Initialize a variable `ans` to store the result of the DFS traversal. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;19 : DFS Traversal&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;x&lt;/span&gt;: gph[start]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Iterate through all neighbors of the current node (variable). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;20 : DFS Pruning&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(vis.count(x.first)) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Skip already visited nodes to avoid infinite loops. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;21 : Recursive DFS&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x.second &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; dfs(x.first, end, vis, gph);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Recursively call the `dfs` function for the neighboring node and calculate the result. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;22 : DFS Result Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; If the result of the recursive call is negative (no path found), continue to the next neighbor. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;23 : Return Result&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; If a valid result is found, return it. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;24 : Return Default&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; If no valid result was found, return the default value (-1). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(V &amp;#43; E) where V is the number of vertices (variables) and E is the number of edges (equations).&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(V &amp;#43; E) per query.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(V &amp;#43; E) per query.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The time complexity is linear with respect to the number of variables and equations, and each query requires traversal of the graph.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(V &amp;#43; E) for storing the graph.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(V &amp;#43; E) where V is the number of vertices and E is the number of edges.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The space complexity is proportional to the size of the graph created from the equations.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6219690368643953&#34;&#xA;     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;&#xA;    &lt;ins class=&#34;adsbygoogle&#34;&#xA;        style=&#34;display:block; text-align:center;&#34;&#xA;        data-ad-layout=&#34;in-article&#34;&#xA;        data-ad-format=&#34;fluid&#34;&#xA;        data-ad-client=&#34;ca-pub-6219690368643953&#34;&#xA;        data-ad-slot=&#34;5533433286&#34;&gt;&lt;/ins&gt;&#xA;    &lt;script&gt;&#xA;        (adsbygoogle = window.adsbygoogle || []).push({});&#xA;    &lt;/script&gt;&#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/evaluate-division/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 743: Network Delay Time</title>
      <link>https://www.grid47.xyz/leetcode/solution-743-network-delay-time/</link>
      <pubDate>Sat, 24 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-743-network-delay-time/</guid>
      <description>&lt;h2 id=&#34;hahahugoshortcode1282s0hbhb&#34;&gt;&lt;figure class=&#34;remote-image&#34; style=&#34;text-align:center; margin: 0;&#34;&gt;&#xA;    &lt;div style=&#34;position: relative; width:900px; max-width:100%; padding-bottom:56.25%; overflow: hidden; border-radius:0px;&#34;&gt;&#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/grid47/list-images/refs/heads/main/list/743.webp&#34; &#xA;           alt=&#34;A network of nodes where the delay time is calculated, with the shortest delay glowing softly as it’s found.&#34; &#xA;           style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;      &lt;figcaption style=&#34;font-size: 0.5em; font-weight: 300; color:#555; margin-top: 4px; line-height: 1.2;&#34;&gt;&#xA;        Solution to LeetCode 743: Network Delay Time Problem&#xA;      &lt;/figcaption&gt;&#xA;    &#xA;  &lt;/figure&gt;&#xA;  &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are given a network of &lt;code&gt;n&lt;/code&gt; nodes and a list of directed edges with travel times. You need to send a signal from a given node &lt;code&gt;k&lt;/code&gt;. Return the minimum time it takes for all nodes to receive the signal, or return &lt;code&gt;-1&lt;/code&gt; if it is impossible. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; The input consists of a list of directed edges `times[i] = (ui, vi, wi)` representing the travel time from node `ui` to node `vi`, as well as the number of nodes `n` and the starting node `k`.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; times = [[1, 2, 1], [1, 3, 2], [3, 4, 1]], n = 4, k = 1&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= k &amp;lt;= n &amp;lt;= 100&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= times.length &amp;lt;= 6000&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • times[i].length == 3&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= ui, vi &amp;lt;= n&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • ui != vi&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= wi &amp;lt;= 100&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • All (ui, vi) pairs are unique.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; Return the minimum time it takes for all `n` nodes to receive the signal, or return `-1` if it is impossible for all nodes to receive the signal.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; For times = [[1, 2, 1], [1, 3, 2], [3, 4, 1]], n = 4, k = 1, the output is 3.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; Find the minimum time it takes for all nodes to receive the signal or determine if it is impossible.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Use a graph representation to model the nodes and edges with the travel times.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Use Dijkstra&amp;#39;s algorithm to find the shortest path from the starting node `k` to all other nodes.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If all nodes are reachable, return the maximum time taken by the farthest node.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If any node is unreachable, return `-1`.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The input graph has up to 100 nodes and 6000 edges. The graph is directed, and there are no multiple edges between any two nodes.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= k &amp;lt;= n &amp;lt;= 100&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= times.length &amp;lt;= 6000&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= wi &amp;lt;= 100&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The network will be represented as a directed graph with unique edges.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; For times = [[1, 2, 1], [1, 3, 2], [3, 4, 1]], n = 4, k = 1&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; By using Dijkstra&amp;#39;s algorithm, we can calculate the shortest time for the signal to reach each node, and we find that the signal reaches all nodes in 3 units of time.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; This problem can be solved using Dijkstra&amp;#39;s algorithm to find the shortest path from the starting node to all other nodes in the graph.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • We need to find the shortest time for a signal to reach all nodes from the starting node.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The problem can be modeled as a shortest path problem in a weighted directed graph.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Since the graph can have up to 6000 edges, Dijkstra&amp;#39;s algorithm with a priority queue should be efficient enough.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Create a map to represent the directed graph with travel times.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Use a priority queue to implement Dijkstra&amp;#39;s algorithm for finding the shortest time from node `k` to all other nodes.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • For each node, update the shortest time to reach it and continue until all reachable nodes are processed.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If any node is unreachable, return `-1`. Otherwise, return the maximum time it took to reach all nodes.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • There will always be at least one node and one edge, so no empty graph cases.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • For large inputs (with up to 6000 edges), the solution should be optimized to handle the upper limits efficiently.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If the starting node `k` is isolated or there are disconnected nodes, the function should return `-1`.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure that the algorithm works efficiently for graphs with up to 6000 edges.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Variable Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Loop Setup&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Map Update&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Priority Queue Setup&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Visited Nodes Setup&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;7&#34;&gt; 7 Push Initial Node&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;8&#34;&gt; 8 While Loop&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;9&#34;&gt; 9 Extract Minimum&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;10&#34;&gt; 10 Pop from Queue&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;11&#34;&gt; 11 Skip Visited&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;12&#34;&gt; 12 Mark as Visited&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;13&#34;&gt; 13 Decrement Nodes&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;14&#34;&gt; 14 Check Completion&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;15&#34;&gt; 15 Edge Traversal Check&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;16&#34;&gt; 16 Process Neighbors&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;17&#34;&gt; 17 Push Neighbors to Queue&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;18&#34;&gt; 18 Return Failure&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;networkDelayTime&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; times, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    map&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;, map&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; mp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; times.size(); i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mp[times[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]][times[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; times[i][&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    priority_queue&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;, greater&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; pq;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; vis(n &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pq.push(make_pair(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, k));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;pq.empty()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pq.top();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pq.pop();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(vis[it.second]) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vis[it.second] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a2f&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        n&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(n &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; it.first;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(mp.count(it.second))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; [key, val]&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; mp[it.second]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                pq.push(make_pair(val &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; it.first, key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;networkDelayTime&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; times, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Function that computes the time it takes for all nodes to receive the signal starting from node &amp;#39;k&amp;#39;. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Variable Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    map&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;, map&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; mp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This map stores the network connections where each node is mapped to another node with its travel time. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Loop Setup&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; times.size(); i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Loop to iterate through the &amp;#39;times&amp;#39; array and populate the map with edges (nodes and weights). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Map Update&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mp[times[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]][times[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; times[i][&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Updating the map with the source node, destination node, and the travel time between them. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Priority Queue Setup&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    priority_queue&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;, greater&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; pq;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; A priority queue to always process the node with the smallest time first. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Visited Nodes Setup&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; vis(n &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; A vector to track which nodes have been visited. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;7 : Push Initial Node&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pq.push(make_pair(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, k));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Push the starting node &amp;#39;k&amp;#39; with an initial time of 0 into the priority queue. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;8 : While Loop&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;pq.empty()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; While the priority queue is not empty, process each node. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;9 : Extract Minimum&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pq.top();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Extract the node with the smallest accumulated time from the priority queue. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;10 : Pop from Queue&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pq.pop();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Remove the top element (current node) from the priority queue. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;11 : Skip Visited&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(vis[it.second]) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Skip nodes that have already been visited to avoid unnecessary processing. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;12 : Mark as Visited&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vis[it.second] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a2f&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Mark the current node as visited. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;13 : Decrement Nodes&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        n&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Decrement the number of remaining nodes to be processed. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;14 : Check Completion&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(n &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; it.first;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; If all nodes are visited, return the accumulated time to reach the farthest node. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;15 : Edge Traversal Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(mp.count(it.second))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Check if the current node has any outgoing edges. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;16 : Process Neighbors&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; [key, val]&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; mp[it.second]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Iterate over all neighboring nodes of the current node. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;17 : Push Neighbors to Queue&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                pq.push(make_pair(val &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; it.first, key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Push the neighboring nodes into the priority queue with the updated accumulated time. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;18 : Return Failure&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Return -1 if it&amp;#39;s not possible to visit all nodes. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(E log V), where E is the number of edges and V is the number of nodes.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(E log V), as each edge and node is processed once.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(E log V), where E is the number of edges and V is the number of nodes.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The time complexity is O(E log V), where E is the number of edges and V is the number of nodes, due to the priority queue operations in Dijkstra&amp;#39;s algorithm.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(V &amp;#43; E), for storing the graph and the priority queue.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(V &amp;#43; E), where V is the number of nodes and E is the number of edges.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The space complexity is O(V &amp;#43; E) due to the storage required for the graph and the priority queue.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6219690368643953&#34;&#xA;     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;&#xA;    &lt;ins class=&#34;adsbygoogle&#34;&#xA;        style=&#34;display:block; text-align:center;&#34;&#xA;        data-ad-layout=&#34;in-article&#34;&#xA;        data-ad-format=&#34;fluid&#34;&#xA;        data-ad-client=&#34;ca-pub-6219690368643953&#34;&#xA;        data-ad-slot=&#34;5533433286&#34;&gt;&lt;/ins&gt;&#xA;    &lt;script&gt;&#xA;        (adsbygoogle = window.adsbygoogle || []).push({});&#xA;    &lt;/script&gt;&#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/network-delay-time/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 787: Cheapest Flights Within K Stops</title>
      <link>https://www.grid47.xyz/leetcode/solution-787-cheapest-flights-within-k-stops/</link>
      <pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-787-cheapest-flights-within-k-stops/</guid>
      <description>&lt;h2 id=&#34;hahahugoshortcode1301s0hbhb&#34;&gt;&lt;figure class=&#34;remote-image&#34; style=&#34;text-align:center; margin: 0;&#34;&gt;&#xA;    &lt;div style=&#34;position: relative; width:900px; max-width:100%; padding-bottom:56.25%; overflow: hidden; border-radius:0px;&#34;&gt;&#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/grid47/list-images/refs/heads/main/list/787.webp&#34; &#xA;           alt=&#34;A map where the cheapest flight path is calculated, glowing softly as the optimal path is found.&#34; &#xA;           style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;      &lt;figcaption style=&#34;font-size: 0.5em; font-weight: 300; color:#555; margin-top: 4px; line-height: 1.2;&#34;&gt;&#xA;        Solution to LeetCode 787: Cheapest Flights Within K Stops Problem&#xA;      &lt;/figcaption&gt;&#xA;    &#xA;  &lt;/figure&gt;&#xA;  &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are given a number of cities and a list of flights between them. Each flight has a price and connects two cities. You need to find the cheapest route from a given source city to a destination city with at most a certain number of stops. If no such route exists, return -1. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; The input consists of the number of cities, the list of flights, the source city, the destination city, and the maximum number of stops allowed.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= n &amp;lt;= 100&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= flights.length &amp;lt;= (n * (n - 1) / 2)&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • flights[i].length == 3&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= fromi, toi &amp;lt; n&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • fromi != toi&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= pricei &amp;lt;= 104&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • There will not be any multiple flights between two cities.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= src, dst, k &amp;lt; n&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • src != dst&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; The output should be the cheapest price to travel from the source city to the destination city with at most k stops. If no such route exists, return -1.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Output: 700&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The output will be an integer representing the cheapest price.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The goal is to find the cheapest price between the source and destination cities with at most k stops.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Use the Bellman-Ford algorithm to find the shortest path.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Run the algorithm k&amp;#43;1 times to account for at most k stops.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Track the minimum price for each flight path.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; Make sure to handle edge cases such as no available flights, flights with more than k stops, and large numbers of cities and flights.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure the number of cities (n) does not exceed 100.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure the flights array does not contain duplicate entries.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • You can assume there are no direct flights from the source to destination if the source is not equal to the destination.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Flights may have different costs and may be one-way only.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; In this example, we need to find the cheapest route from city 0 to city 3 with at most one stop. The cheapest route is through city 1 with a total cost of 700.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The cheapest route from city 0 to city 2 with one stop is through city 1, costing a total of 200.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; We will use a modified version of the Bellman-Ford algorithm to find the minimum cost with at most k stops. This involves iterating over the flights k&amp;#43;1 times and updating the minimum cost for each destination city.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The Bellman-Ford algorithm is well-suited to this problem because it efficiently handles finding the shortest path with constraints on the number of stops.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • We will track the minimum cost for each city and update it over k&amp;#43;1 iterations, ensuring that we consider all possible flight paths within the stop limit.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Initialize an array to track the minimum cost to reach each city.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Perform k&amp;#43;1 iterations over the flights to find the cheapest price for each destination.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • At each iteration, update the cost of reaching each destination city by considering the cost of the previous city plus the flight price.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Return the cost to reach the destination city after k&amp;#43;1 iterations, or -1 if no valid path is found.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If the flights array is empty, return -1.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If the number of cities or flights is large, ensure the algorithm runs within time limits.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If k is 0, only direct flights should be considered.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure that the solution handles cases with no valid path correctly.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Definition&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Variable Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Assignment&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Empty&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Loop&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;7&#34;&gt; 7 Variable Copy&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;8&#34;&gt; 8 Edge Relaxation&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;9&#34;&gt; 9 Edge Update&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;10&#34;&gt; 10 Assignment&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;11&#34;&gt; 11 Return Statement&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;//bellman ford.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;//just run it k+1 iterations.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;findCheapestPrice&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; src, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; sink, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; c(n, &lt;span style=&#34;color:#666&#34;&gt;1e8&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c[src] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; z&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt;k; z&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; C(c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;e&lt;/span&gt;: a)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            C[e[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; min(C[e[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]], c[e[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; e[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; C;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; c[sink] &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1e8&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; c[sink];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Definition&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;findCheapestPrice&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; src, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; sink, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This is the function definition where &amp;#39;n&amp;#39; is the number of nodes, &amp;#39;a&amp;#39; is the adjacency list of the graph, &amp;#39;src&amp;#39; is the source node, &amp;#39;sink&amp;#39; is the destination node, and &amp;#39;k&amp;#39; is the maximum number of stops allowed. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line is an empty placeholder for any future code or logic. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Variable Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; c(n, &lt;span style=&#34;color:#666&#34;&gt;1e8&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This initializes a vector &amp;#39;c&amp;#39; to store the cost of reaching each node, initially set to a high value (1e8). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Assignment&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c[src] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; The source node&amp;#39;s cost is set to 0, as there is no cost to reach the source itself. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Empty&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line is an empty placeholder for any future code or logic. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Loop&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; z&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt;k; z&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This for loop runs for &amp;#39;k&amp;#43;1&amp;#39; iterations, where each iteration corresponds to relaxing the edges to find the shortest path. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;7 : Variable Copy&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; C(c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This creates a copy of the current cost vector &amp;#39;c&amp;#39; into &amp;#39;C&amp;#39; to update the costs for the current iteration. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;8 : Edge Relaxation&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;e&lt;/span&gt;: a)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This loop iterates over each edge in the adjacency list &amp;#39;a&amp;#39; to relax the edges and update the cost vector. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;9 : Edge Update&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            C[e[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; min(C[e[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]], c[e[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; e[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line updates the cost to reach node &amp;#39;e[1]&amp;#39; as the minimum of the current cost and the cost to reach &amp;#39;e[0]&amp;#39; plus the weight of the edge &amp;#39;e[2]&amp;#39;. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;10 : Assignment&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; C;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; After the inner loop completes, the updated costs in vector &amp;#39;C&amp;#39; are assigned back to &amp;#39;c&amp;#39;. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;11 : Return Statement&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; c[sink] &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1e8&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; c[sink];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; The function returns the cost to reach the sink node. If the cost is still set to a high value (1e8), it means no valid path exists, so it returns -1. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(k * E), where E is the number of flights.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(k * E), where E is the number of flights.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(k * E), where E is the number of flights.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The time complexity is linear with respect to the number of flights and the number of stops, with k being the maximum number of stops allowed.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n), where n is the number of cities.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n), where n is the number of cities.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The space complexity is O(n) because we need to maintain an array of size n to track the minimum cost to each city.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6219690368643953&#34;&#xA;     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;&#xA;    &lt;ins class=&#34;adsbygoogle&#34;&#xA;        style=&#34;display:block; text-align:center;&#34;&#xA;        data-ad-layout=&#34;in-article&#34;&#xA;        data-ad-format=&#34;fluid&#34;&#xA;        data-ad-client=&#34;ca-pub-6219690368643953&#34;&#xA;        data-ad-slot=&#34;5533433286&#34;&gt;&lt;/ins&gt;&#xA;    &lt;script&gt;&#xA;        (adsbygoogle = window.adsbygoogle || []).push({});&#xA;    &lt;/script&gt;&#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/cheapest-flights-within-k-stops/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1334: Find the City With the Smallest Number of Neighbors at a Threshold Distance</title>
      <link>https://www.grid47.xyz/leetcode/solution-1334-find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/</link>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-1334-find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; Given a set of cities connected by weighted edges, find the city with the least number of reachable cities under a distance threshold. If multiple cities have the same number of reachable cities, return the one with the greatest index. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; You are given an integer `n`, representing the number of cities. You are also given a list of edges where each edge is an array `[fromi, toi, weighti]`, representing a bidirectional edge between cities `fromi` and `toi` with weight `weighti`. Additionally, you are given an integer `distanceThreshold` that limits the maximum distance for considering a reachable city.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2 &amp;lt;= n &amp;lt;= 100&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= edges.length &amp;lt;= n * (n - 1) / 2&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • edges[i].length == 3&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= fromi &amp;lt; toi &amp;lt; n&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= weighti, distanceThreshold &amp;lt;= 10^4&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • All pairs (fromi, toi) are distinct.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; Return the city with the smallest number of cities reachable within the `distanceThreshold`. If there are multiple such cities, return the city with the highest index.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; For `n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4`, the output will be `City 3`.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; Find the city with the least number of reachable cities within the distance threshold and return the one with the greatest index in case of ties.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1. Represent the cities and edges using an adjacency matrix or a graph.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2. Implement a shortest path algorithm (like Floyd-Warshall) to compute the minimum distances between all pairs of cities.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 3. For each city, count the number of cities that are reachable within the distance threshold.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 4. Keep track of the city with the fewest reachable cities, and in case of a tie, return the city with the largest index.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The problem imposes the following constraints on the inputs:&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2 &amp;lt;= n &amp;lt;= 100&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= edges.length &amp;lt;= n * (n - 1) / 2&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • edges[i].length == 3&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= fromi &amp;lt; toi &amp;lt; n&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= weighti, distanceThreshold &amp;lt;= 10^4&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • All pairs (fromi, toi) are distinct.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The graph is undirected.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The weights on edges are positive integers.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The graph is connected enough for a reasonable number of cities to be reachable from any city.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Example 1: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; City 3 has the least number of reachable cities (2 cities), and has the highest index, so the answer is City 3.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Example 2: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; City 0 has the fewest reachable cities (only 1), so it is the answer.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; To solve this problem, we need to calculate the shortest paths between all cities and determine how many cities each city can reach under the distance threshold.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • We need a method to efficiently compute the shortest paths between all pairs of cities.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The Floyd-Warshall algorithm is ideal for this problem since it computes all pairs shortest paths and handles the graph size well given the constraints.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • This problem requires a graph traversal technique and careful consideration of tie-breaking when cities have the same number of reachable cities.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1. Create an adjacency matrix to store the distance between cities.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2. Use the Floyd-Warshall algorithm to compute shortest paths between all pairs of cities.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 3. For each city, count how many cities are reachable within the given distance threshold.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 4. Track the city with the fewest reachable cities and handle ties by selecting the city with the largest index.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • This problem does not involve empty inputs.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Handle large inputs up to 100 cities efficiently using algorithms that scale well, like Floyd-Warshall.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Distance threshold equals the maximum edge weight, ensuring that we consider paths within the threshold.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure the adjacency matrix correctly reflects the distances for each pair of cities.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Definition&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Matrix Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Edge Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Matrix Update&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Self-Distance Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Diagonal Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;7&#34;&gt; 7 Floyd-Warshall Loop&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;8&#34;&gt; 8 Outer Loop&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;9&#34;&gt; 9 Inner Loop&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;10&#34;&gt; 10 Distance Update&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;11&#34;&gt; 11 City with Fewest Reachable Cities&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;12&#34;&gt; 12 City Loop&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;13&#34;&gt; 13 Counter Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;14&#34;&gt; 14 Inner City Loop&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;15&#34;&gt; 15 Reachability Check&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;16&#34;&gt; 16 Counter Increment&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;17&#34;&gt; 17 City with Fewest Reachable Cities Check&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;18&#34;&gt; 18 Update City Result&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;19&#34;&gt; 19 Update Smallest Counter&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;20&#34;&gt; 20 Return Result&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;findTheCity&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; eds, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; thd) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; d(n, vector (n, &lt;span style=&#34;color:#666&#34;&gt;10001&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a0a000&#34;&gt;e&lt;/span&gt;: eds) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d[e[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]][e[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; d[e[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]][e[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; e[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ d[i][i] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; k &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; k&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; j&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                d[i][j] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; min(d[i][j],d[i][k] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; d[k][j]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; sm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; ; j &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; j&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(d[i][j] &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; thd) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                cnt&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; (cnt &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; sm) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cnt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Definition&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;findTheCity&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; eds, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; thd) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This is the function definition where we declare the function that will find the city with the least number of reachable cities within a distance threshold. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Matrix Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; d(n, vector (n, &lt;span style=&#34;color:#666&#34;&gt;10001&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; We initialize a distance matrix &amp;#39;d&amp;#39; of size &amp;#39;n x n&amp;#39; with large values (10001) to represent the initial distances between cities. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Edge Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a0a000&#34;&gt;e&lt;/span&gt;: eds) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; We loop through the edges of the graph to populate the distance matrix with the provided distances. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Matrix Update&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d[e[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]][e[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; d[e[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]][e[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; e[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; For each edge, we set the distance between the cities &amp;#39;e[0]&amp;#39; and &amp;#39;e[1]&amp;#39; as the given distance &amp;#39;e[2]&amp;#39; in both directions. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Self-Distance Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; We set the distance from a city to itself to 0, as it will always be 0. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Diagonal Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ d[i][i] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Here, we assign 0 to the diagonal elements of the matrix, representing that the distance from each city to itself is zero. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;7 : Floyd-Warshall Loop&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; k &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; k&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; We begin the main loop of the Floyd-Warshall algorithm, iterating over each city &amp;#39;k&amp;#39; as an intermediate point. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;8 : Outer Loop&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; We iterate through each city &amp;#39;i&amp;#39; that may have a shorter path through &amp;#39;k&amp;#39;. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;9 : Inner Loop&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; j&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; We iterate through each city &amp;#39;j&amp;#39; that may be reached by &amp;#39;i&amp;#39; via the intermediate city &amp;#39;k&amp;#39;. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;10 : Distance Update&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                d[i][j] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; min(d[i][j],d[i][k] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; d[k][j]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; We update the distance from city &amp;#39;i&amp;#39; to city &amp;#39;j&amp;#39; to the shorter of the current distance or the distance via &amp;#39;k&amp;#39;. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;11 : City with Fewest Reachable Cities&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; sm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; We initialize variables &amp;#39;sm&amp;#39; to track the smallest number of reachable cities and &amp;#39;res&amp;#39; to store the city with the fewest reachable cities. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;12 : City Loop&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; We iterate through each city &amp;#39;i&amp;#39; to count how many cities are within the distance threshold. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;13 : Counter Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; We initialize a counter &amp;#39;cnt&amp;#39; to count the number of cities that are reachable from city &amp;#39;i&amp;#39; within the threshold distance. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;14 : Inner City Loop&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; ; j &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n; j&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; We loop through all cities &amp;#39;j&amp;#39; to check if they are reachable from city &amp;#39;i&amp;#39; within the given distance threshold. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;15 : Reachability Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(d[i][j] &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; thd) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; We check if the distance from city &amp;#39;i&amp;#39; to city &amp;#39;j&amp;#39; is within the threshold &amp;#39;thd&amp;#39;. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;16 : Counter Increment&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                cnt&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; If city &amp;#39;j&amp;#39; is reachable from city &amp;#39;i&amp;#39;, we increment the counter. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;17 : City with Fewest Reachable Cities Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; (cnt &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; sm) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; We check if the current city has fewer or equal reachable cities than the previous city with the least number of reachable cities. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;18 : Update City Result&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            res &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; If city &amp;#39;i&amp;#39; has fewer reachable cities, we update the result to this city. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;19 : Update Smallest Counter&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cnt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; We update the smallest counter &amp;#39;sm&amp;#39; to the current count of reachable cities. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;20 : Return Result&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Finally, we return the city with the fewest reachable cities. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n^3) for the Floyd-Warshall algorithm.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(n^3) due to the all-pairs shortest path algorithm.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n^3)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The time complexity is dominated by the Floyd-Warshall algorithm, which runs in O(n^3).&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n^2)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n^2) for storing the adjacency matrix.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The space complexity is O(n^2) due to the storage of the distance matrix for all city pairs.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6219690368643953&#34;&#xA;     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;&#xA;    &lt;ins class=&#34;adsbygoogle&#34;&#xA;        style=&#34;display:block; text-align:center;&#34;&#xA;        data-ad-layout=&#34;in-article&#34;&#xA;        data-ad-format=&#34;fluid&#34;&#xA;        data-ad-client=&#34;ca-pub-6219690368643953&#34;&#xA;        data-ad-slot=&#34;5533433286&#34;&gt;&lt;/ins&gt;&#xA;    &lt;script&gt;&#xA;        (adsbygoogle = window.adsbygoogle || []).push({});&#xA;    &lt;/script&gt;&#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1514: Path with Maximum Probability</title>
      <link>https://www.grid47.xyz/leetcode/solution-1514-path-with-maximum-probability/</link>
      <pubDate>Sat, 08 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-1514-path-with-maximum-probability/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are given an undirected, weighted graph of &lt;code&gt;n&lt;/code&gt; nodes, represented by an edge list, where each edge connects two nodes with a given success probability. Given two nodes, &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;, find the path with the maximum probability of success to go from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt;. &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; The input consists of an integer `n`, an edge list `edges`, an array `succProb` of success probabilities for each edge, and two integers `start` and `end`, representing the nodes to traverse from and to.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; n = 4, edges = [[0,1],[1,2],[0,2],[2,3]], succProb = [0.9, 0.8, 0.5, 0.7], start = 0, end = 3&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 2 &amp;lt;= n &amp;lt;= 10^4&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= start, end &amp;lt; n&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • start != end&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= a, b &amp;lt; n&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • a != b&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= succProb.length == edges.length &amp;lt;= 2*10^4&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= succProb[i] &amp;lt;= 1&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; Return the maximum probability of success of the path from `start` to `end`.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; 0.31500&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The answer must be accurate within a relative or absolute error of (10^{-5}).&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The goal is to find the path from `start` to `end` with the highest probability. This can be done using a modified Dijkstra&amp;#39;s algorithm, where instead of finding the shortest path, we maximize the product of probabilities.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 1: Build a graph representation where each edge has a success probability.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 2: Use a priority queue to perform a modified Dijkstra&amp;#39;s algorithm, where at each step, you explore the node with the maximum success probability.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 3: Update the probability of reaching each neighboring node and continue until you reach the `end` node.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The graph is undirected, and there is at most one edge between each pair of nodes.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The number of nodes `n` can be as large as 10^4, and the number of edges can be as large as 2 * 10^4.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The success probability for each edge is between 0 and 1 (inclusive).&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The graph is connected, meaning there is at least one path from `start` to `end` unless otherwise stated.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; n = 4, edges = [[0,1],[1,2],[0,2],[2,3]], succProb = [0.9, 0.8, 0.5, 0.7], start = 0, end = 3&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; The problem can be visualized as finding the best route from `0` to `3` by maximizing the product of success probabilities. The highest probability path is through `0 -&amp;gt; 1 -&amp;gt; 2 -&amp;gt; 3`, yielding a success probability of 0.504.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; n = 3, edges = [[0,1],[1,2]], succProb = [0.5, 0.5], start = 0, end = 2&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; In this case, the only available path is `0 -&amp;gt; 1 -&amp;gt; 2`, and the success probability is `0.5 * 0.5 = 0.25`.&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; To solve this problem, we will use a priority queue to implement a variant of Dijkstra’s algorithm. Instead of minimizing the total weight, we will maximize the product of probabilities to reach the `end` node.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • We need to maximize the product of probabilities to find the path with the highest probability of success.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • We will use a priority queue to explore nodes with the highest probability first, updating the probability of reaching neighboring nodes along the way.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 1: Initialize a priority queue to process nodes in decreasing order of their success probability.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 2: For each node, update the probabilities of its neighbors if a better path (higher probability) is found.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 3: Once the `end` node is reached, return the probability of success. If no path exists, return 0.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The graph will never be empty as n &amp;gt;= 2.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure the algorithm works efficiently even for large inputs where n can be as large as 10^4 and edges as many as 2 * 10^4.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Handle cases where there is no path from `start` to `end`.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The solution must run in O(n log n) time to handle large graphs efficiently.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Variable Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Variable Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Variable Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Function Definition&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Graph Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Edge Processing&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;7&#34;&gt; 7 Edge Insertion&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;8&#34;&gt; 8 Edge Insertion&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;9&#34;&gt; 9 Priority Queue Declaration&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;10&#34;&gt; 10 Array Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;11&#34;&gt; 11 Initial Probability Assignment&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;12&#34;&gt; 12 Visited Array Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;13&#34;&gt; 13 Priority Queue Insertion&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;14&#34;&gt; 14 While Loop Start&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;15&#34;&gt; 15 Pop from Priority Queue&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;16&#34;&gt; 16 Pop from Priority Queue&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;17&#34;&gt; 17 Condition Check&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;18&#34;&gt; 18 Mark as Visited&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;19&#34;&gt; 19 Loop Over Adjacent Nodes&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;20&#34;&gt; 20 Condition Check&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;21&#34;&gt; 21 Probability Update&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;22&#34;&gt; 22 Push to Priority Queue&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;23&#34;&gt; 23 Return Statement&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; grid;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; vis;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; ans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;maxProbability&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; edges, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; prob, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; start, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; end) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    grid.resize(n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; edges.size(); i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grid[edges[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]].push_back({edges[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], prob[i]});            &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grid[edges[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]].push_back({edges[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], prob[i]});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    priority_queue&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; pq;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; mx(n, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mx[start] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vis.resize(n, &lt;span style=&#34;color:#a2f&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;// vis[start] = true;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;    pq.push({&lt;span style=&#34;color:#666&#34;&gt;1.0&lt;/span&gt;, start});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;pq.empty()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pq.top();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pq.pop();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;vis[it.second]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            vis[it.second] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a2f&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;x&lt;/span&gt;: grid[it.second]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(mx[x.first] &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; it.first &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x.second) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    mx[x.first] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; it.first &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x.second;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    pq.push({it.first &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x.second, x.first});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; mx[end];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Variable Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; grid;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Declares a 2D vector `grid` to store the graph, where each element represents a node and a pair consisting of an adjacent node and the probability of traveling to that node. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Variable Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; vis;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Declares a vector `vis` to track whether each node has been visited during the process. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Variable Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; ans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Declares a variable `ans` to store the final result, which will hold the maximum probability of reaching the destination node. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Function Definition&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;maxProbability&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; edges, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; prob, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; start, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; end) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Defines the function `maxProbability` which takes the number of nodes `n`, the list of edges `edges`, the list of probabilities `prob`, and the start and end nodes as input parameters. It returns the maximum probability of reaching the destination node. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Graph Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    grid.resize(n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Resizes the `grid` to accommodate `n` nodes, ensuring each node has an associated adjacency list. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Edge Processing&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; edges.size(); i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Iterates over the edges and processes each one to add connections to the adjacency list in `grid`. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;7 : Edge Insertion&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grid[edges[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]].push_back({edges[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], prob[i]});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Adds an edge to the adjacency list of node `edges[i][1]`, connecting it to node `edges[i][0]` with the probability `prob[i]`. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;8 : Edge Insertion&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grid[edges[i][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]].push_back({edges[i][&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], prob[i]});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Adds an edge to the adjacency list of node `edges[i][0]`, connecting it to node `edges[i][1]` with the probability `prob[i]`. This ensures the graph is undirected. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;9 : Priority Queue Declaration&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    priority_queue&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; pq;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Declares a priority queue `pq` to process nodes with the highest probability first. The queue stores pairs of probabilities and node indices. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;10 : Array Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; mx(n, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Declares and initializes a vector `mx` to store the maximum probability of reaching each node. Initially, all probabilities are set to 0. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;11 : Initial Probability Assignment&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mx[start] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Sets the probability of reaching the `start` node to 1, as the probability of starting at the start node is always 1. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;12 : Visited Array Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vis.resize(n, &lt;span style=&#34;color:#a2f&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Resizes the `vis` vector to store `n` boolean values, initialized to `false`, to track whether each node has been visited. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;13 : Priority Queue Insertion&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pq.push({&lt;span style=&#34;color:#666&#34;&gt;1.0&lt;/span&gt;, start});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Pushes the `start` node into the priority queue with an initial probability of 1.0. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;14 : While Loop Start&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;pq.empty()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Starts a while loop that continues as long as the priority queue `pq` is not empty. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;15 : Pop from Priority Queue&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pq.top();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Extracts the top element from the priority queue, which is the node with the highest probability. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;16 : Pop from Priority Queue&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pq.pop();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Removes the top element from the priority queue after it has been processed. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;17 : Condition Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;vis[it.second]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Checks if the current node has not been visited. If it has not, the code proceeds to process it. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;18 : Mark as Visited&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            vis[it.second] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a2f&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Marks the current node as visited to avoid revisiting it in subsequent iterations. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;19 : Loop Over Adjacent Nodes&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#a0a000&#34;&gt;x&lt;/span&gt;: grid[it.second]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Loops through the adjacent nodes of the current node `it.second`. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;20 : Condition Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(mx[x.first] &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; it.first &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x.second) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Checks if the probability of reaching the adjacent node `x.first` is less than the current probability multiplied by the edge&amp;#39;s probability `x.second`. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;21 : Probability Update&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    mx[x.first] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; it.first &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x.second;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Updates the maximum probability for the adjacent node `x.first` if a higher probability path is found. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;22 : Push to Priority Queue&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    pq.push({it.first &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; x.second, x.first});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Pushes the adjacent node `x.first` with the updated probability into the priority queue. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;23 : Return Statement&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; mx[end];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Returns the maximum probability of reaching the destination node `end`. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n log n)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O(n log n)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n log n)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The worst case occurs when the priority queue has to process all the nodes, each requiring log n operations.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; We store probabilities for each node and the graph structure, leading to a space complexity of O(n).&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6219690368643953&#34;&#xA;     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;&#xA;    &lt;ins class=&#34;adsbygoogle&#34;&#xA;        style=&#34;display:block; text-align:center;&#34;&#xA;        data-ad-layout=&#34;in-article&#34;&#xA;        data-ad-format=&#34;fluid&#34;&#xA;        data-ad-client=&#34;ca-pub-6219690368643953&#34;&#xA;        data-ad-slot=&#34;5533433286&#34;&gt;&lt;/ins&gt;&#xA;    &lt;script&gt;&#xA;        (adsbygoogle = window.adsbygoogle || []).push({});&#xA;    &lt;/script&gt;&#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/path-with-maximum-probability/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1786: Number of Restricted Paths From First to Last Node</title>
      <link>https://www.grid47.xyz/leetcode/solution-1786-number-of-restricted-paths-from-first-to-last-node/</link>
      <pubDate>Sun, 12 May 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-1786-number-of-restricted-paths-from-first-to-last-node/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; &lt;p&gt;You are given a connected, undirected, weighted graph with n nodes, labeled from 1 to n. An array &amp;rsquo;edges&amp;rsquo; represents the edges in the graph where each element edges[i] = [ui, vi, weighti] indicates that there is an edge between nodes ui and vi with a weight of weighti. A path from node start to node end is a sequence of nodes [z0, z1, &amp;hellip;, zk] such that z0 = start, zk = end, and there is an edge between zi and zi+1 for each 0 &amp;lt;= i &amp;lt;= k-1.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1976: Number of Ways to Arrive at Destination</title>
      <link>https://www.grid47.xyz/leetcode/solution-1976-number-of-ways-to-arrive-at-destination/</link>
      <pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://www.grid47.xyz/leetcode/solution-1976-number-of-ways-to-arrive-at-destination/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;&#34;&gt; You are in a city with &lt;code&gt;n&lt;/code&gt; intersections, and roads connecting them with specific travel times. Your task is to find the number of different ways you can travel from intersection 0 to intersection n-1 in the shortest time possible. Since the result could be large, return it modulo (10^9 + 7). &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;problem-guide&#34;&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-tags&#34;&gt;&#xA;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Problem&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Problem&#39;)&#34;&gt;&#xA;             Problem             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Approach&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Approach&#39;)&#34;&gt;&#xA;             Approach             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Steps&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Steps&#39;)&#34;&gt;&#xA;             Steps             &#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;problem-guide-tag&#34; &#xA;             data-target=&#34;Complexity&#34; &#xA;             onclick=&#34;switchProblemGuideContent(this, &#39;Complexity&#39;)&#34;&gt;&#xA;             Complexity             &#xA;        &lt;/div&gt; &#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;    &lt;div class=&#34;problem-guide-content&#34;&gt;&#xA;&#xA;        &lt;div id=&#34;Problem&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: block;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;0&#34;&gt;Input Representations&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;1&#34;&gt;Output Specifications&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;2&#34;&gt;Core Logics&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;3&#34;&gt;Constraints&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;4&#34;&gt;Problem Assumptions&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Problem&#34; data-slide=&#34;5&#34;&gt;Examples&lt;/button&gt;                &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Problem&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Input:&lt;/b&gt; The input consists of an integer `n` (the number of intersections) and a 2D integer array `roads` where each road is represented by three integers `[u, v, time]`, indicating a road between intersection `u` and `v` that takes `time` minutes to travel.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; n = 4, roads = [[0, 1, 1], [1, 2, 1], [2, 3, 1], [0, 2, 2], [1, 3, 2]]&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= n &amp;lt;= 200&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • n - 1 &amp;lt;= roads.length &amp;lt;= n * (n - 1) / 2&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 0 &amp;lt;= ui, vi &amp;lt;= n - 1&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • 1 &amp;lt;= time &amp;lt;= 10^9&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • ui != vi&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • There is at most one road between any two intersections&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • You can reach any intersection from any other intersection&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Output:&lt;/b&gt; The output should be a single integer, representing the number of different ways to travel from intersection 0 to intersection n-1 using the shortest time. The answer should be returned modulo (10^9 &amp;#43; 7).&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Example:&lt;/b&gt; Output: 2&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The result should be an integer.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; Find the number of ways to travel from intersection 0 to intersection n-1 in the shortest time.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 1: Build a graph where each node represents an intersection and each edge represents a road with a time cost.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 2: Use Dijkstra&amp;#39;s algorithm to find the shortest time to reach all intersections from intersection 0.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 3: Track the number of ways to reach each intersection with the shortest time, updating the count whenever a shorter path is found or an equal-length path is discovered.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 4: Return the number of ways to reach intersection n-1, modulo (10^9 &amp;#43; 7).&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;                      &#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Goal:&lt;/b&gt; The solution must be efficient enough to handle the problem&amp;#39;s constraints.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The matrix size `n` can be as large as 200.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The number of roads can be as large as ( n(n - 1)/2 ), so the solution must be optimized.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;        &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Assumptions:&lt;/b&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The graph is connected, meaning there&amp;#39;s always a path from intersection 0 to intersection n-1.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • There is only one road between any two intersections.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;     &#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: n = 4, roads = [[0, 1, 1], [1, 2, 1], [2, 3, 1], [0, 2, 2], [1, 3, 2]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; In this case, the shortest time to go from intersection 0 to intersection 3 is 3 minutes, and there are two ways to achieve this: [0 -&amp;gt; 1 -&amp;gt; 2 -&amp;gt; 3] and [0 -&amp;gt; 2 -&amp;gt; 3].&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Input:&lt;/b&gt; Input: n = 3, roads = [[0, 1, 5], [1, 2, 10]]&lt;/div&gt;&#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • &lt;b&gt;Explanation:&lt;/b&gt; In this case, the only possible way to go from intersection 0 to intersection 2 takes 15 minutes: [0 -&amp;gt; 1 -&amp;gt; 2].&lt;/div&gt;                                &#xA;                                &lt;br/&gt;&#xA;                            &#xA;                    &lt;/div&gt;                         &#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Approach&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;0&#34;&gt;Approach&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;1&#34;&gt;Initial Thoughts&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;2&#34;&gt;Solution Designs&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Approach&#34; data-slide=&#34;3&#34;&gt;Edge Cases&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Approach&#34;&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Approach:&lt;/b&gt; The approach involves using Dijkstra&amp;#39;s algorithm to find the shortest paths from intersection 0 to all other intersections, while keeping track of the number of ways to reach each intersection with the shortest time.&lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Observations:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Dijkstra&amp;#39;s algorithm is a natural fit for finding the shortest path in a graph with weighted edges.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • We need to track not only the shortest distances but also the number of ways to reach each node with those distances.&lt;/div&gt;&#xA;                            &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • We need to modify Dijkstra&amp;#39;s algorithm to maintain the count of ways to reach each node in the shortest time.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                    &#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Steps:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 1: Initialize a priority queue for Dijkstra&amp;#39;s algorithm with the start node (intersection 0).&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 2: Use a `ways` array to keep track of the number of ways to reach each intersection, and a `dst` array for the shortest time to each intersection.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 3: For each node, examine its neighbors. If a shorter path is found, update the time and the number of ways to reach that neighbor.&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 4: If an equal-length path is found, add the number of ways from the current node to the neighbor modulo (10^9 &amp;#43; 7).&lt;/div&gt;&#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Step 5: After processing all nodes, return the value of `ways[n-1]`.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Empty Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • The problem guarantees that there is always at least one road connecting the intersections.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Large Inputs:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure the solution can handle the maximum number of roads and intersections, with up to 200 intersections.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Special Values:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • If the graph has only two nodes, the answer is always 1 because there&amp;#39;s exactly one road between them.&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;       &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Constraints:&lt;/b&gt;                        &#xA;                            &#xA;                                &lt;div style=&#34;margin-left: 20px;&#34;&gt; • Ensure the result is calculated modulo (10^9 &amp;#43; 7).&lt;/div&gt;&#xA;                            &#xA;                        &lt;/div&gt;                                                                        &#xA;                    &lt;/div&gt;&#xA;                                        &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;&#xA;        &lt;div id=&#34;Steps&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;0&#34;&gt; Code &lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;1&#34;&gt; 1 Function Definition&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;2&#34;&gt; 2 Data Structures&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;3&#34;&gt; 3 Loop&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;4&#34;&gt; 4 Variable Assignment&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;5&#34;&gt; 5 Graph Construction&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;6&#34;&gt; 6 Graph Construction&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;7&#34;&gt; 7 Variable Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;8&#34;&gt; 8 Variable Assignment&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;9&#34;&gt; 9 Variable Assignment&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;10&#34;&gt; 10 Priority Queue Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;11&#34;&gt; 11 Priority Queue Push&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;12&#34;&gt; 12 Variable Initialization&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;13&#34;&gt; 13 Main Loop&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;14&#34;&gt; 14 Priority Queue Operations&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;15&#34;&gt; 15 Priority Queue Operations&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;16&#34;&gt; 16 Graph Traversal&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;17&#34;&gt; 17 Variable Assignment&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;18&#34;&gt; 18 Condition Check&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;19&#34;&gt; 19 Update Distance and Path&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;20&#34;&gt; 20 Update Path Count&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;21&#34;&gt; 21 Push to Priority Queue&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;22&#34;&gt; 22 Path Count Update&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;23&#34;&gt; 23 Path Count Update&lt;/button&gt;&#xA;                    &#xA;                        &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Steps&#34; data-slide=&#34;24&#34;&gt; 24 Return Statement&lt;/button&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Steps&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &#xA;                            &#xA;                            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;countPaths&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; rds) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pll&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; gph(n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a0a000&#34;&gt;e&lt;/span&gt; : rds) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; u &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; e[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], v &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; e[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], time &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; e[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        gph[u].push_back({v, time});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        gph[v].push_back({u, time});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;ll&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; ways(n, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;), dst(n, LLONG_MAX);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ways[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     dst[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    priority_queue&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pll, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pll&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;, greater&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt; pq;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pq.push({&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;pq.empty()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; [d, u] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pq.top();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pq.pop();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(pll &lt;span style=&#34;color:#a0a000&#34;&gt;nb&lt;/span&gt; : gph[u]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; nxt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; nb.first, t &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; nb.second;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(dst[nxt] &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; d &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; t) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       dst[nxt] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; d &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; t;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       ways[nxt] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ways[u];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       pq.push({d &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; t, nxt});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   } &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; (dst[nxt] &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; d &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; t) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       ways[nxt] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (ways[nxt] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; ways[u]) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000000007&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; ways[n &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;1 : Function Definition&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;countPaths&lt;/span&gt;(&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; n, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; rds) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This line defines the function `countPaths`, which takes an integer `n` (number of nodes) and a 2D vector `rds` (edges and times) as input. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;2 : Data Structures&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pll&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; gph(n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This initializes a graph `gph` represented as an adjacency list of pairs, where each pair holds a neighboring node and the edge&amp;#39;s weight. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;3 : Loop&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a0a000&#34;&gt;e&lt;/span&gt; : rds) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This begins a loop over the input vector `rds`, which represents the edges of the graph, where each edge is described by a triplet (u, v, time). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;4 : Variable Assignment&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; u &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; e[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], v &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; e[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;], time &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; e[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; For each edge `e`, the values of `u` (start node), `v` (end node), and `time` (edge weight) are extracted. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;5 : Graph Construction&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        gph[u].push_back({v, time});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; This adds the edge (v, time) to the adjacency list of node `u`, indicating a directed edge from `u` to `v` with weight `time`. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;6 : Graph Construction&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        gph[v].push_back({u, time});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Similarly, this adds the edge (u, time) to the adjacency list of node `v`, making the graph undirected. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;7 : Variable Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;ll&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; ways(n, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;), dst(n, LLONG_MAX);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Two vectors are initialized: `ways` to store the number of ways to reach each node, and `dst` to store the shortest distance to each node. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;8 : Variable Assignment&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ways[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Set the number of ways to reach the starting node (node 0) to 1. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;9 : Variable Assignment&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     dst[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Set the distance to the starting node to 0. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;10 : Priority Queue Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    priority_queue&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pll, vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;pll&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;, greater&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt; pq;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; A priority queue `pq` is initialized, which will be used to process nodes based on the shortest distance (min-heap). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;11 : Priority Queue Push&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pq.push({&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Push the starting node (0) with distance 0 into the priority queue. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;12 : Variable Initialization&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Initialize a variable `ans` to store the result. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;13 : Main Loop&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;pq.empty()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Start a loop to process the nodes in the priority queue, which will always process the node with the smallest distance first. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;14 : Priority Queue Operations&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;auto&lt;/span&gt; [d, u] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pq.top();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Extract the node with the smallest distance from the priority queue. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;15 : Priority Queue Operations&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pq.pop();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Pop the node from the priority queue. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;16 : Graph Traversal&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt;(pll &lt;span style=&#34;color:#a0a000&#34;&gt;nb&lt;/span&gt; : gph[u]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Traverse the neighbors of node `u` in the graph. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;17 : Variable Assignment&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; nxt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; nb.first, t &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; nb.second;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Extract the next node (`nxt`) and edge weight (`t`) from the neighbor pair. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;18 : Condition Check&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(dst[nxt] &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; d &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; t) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Check if a shorter path to `nxt` is found. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;19 : Update Distance and Path&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       dst[nxt] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; d &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; t;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Update the shortest distance to `nxt`. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;20 : Update Path Count&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       ways[nxt] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ways[u];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Set the number of ways to reach `nxt` to the number of ways to reach `u`. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;21 : Push to Priority Queue&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       pq.push({d &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; t, nxt});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Push the updated node `nxt` with its new distance to the priority queue. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;22 : Path Count Update&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   } &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;if&lt;/span&gt; (dst[nxt] &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; d &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; t) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; If the current path to `nxt` is equal to the best known distance, update the number of ways. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;23 : Path Count Update&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       ways[nxt] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (ways[nxt] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; ways[u]) &lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000000007&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Add the number of ways to reach `u` to the number of ways to reach `nxt`, keeping it modulo 1000000007. &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                        &lt;div class=&#34;step-slide&#34;&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; &lt;b&gt;24 : Return Statement&lt;/b&gt;&lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt;&#xA;                                &#xA;                                &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; ways[n &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                                &#xA;                            &lt;/div&gt;&#xA;                            &lt;div class=&#34;&#34;&gt; Return the number of ways to reach the last node (`n - 1`). &lt;/div&gt;&#xA;                        &lt;/div&gt;&#xA;                    &#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt; &#xA;        &#xA;        &lt;div id=&#34;Complexity&#34; &#xA;            class=&#34;problem-guide-topic-content&#34; &#xA;            style=&#34;display: none;&#34;&gt;&#xA;&#xA;            &lt;div class=&#34;steps-container&#34;&gt;&#xA;                &lt;div class=&#34;step-problem-guide-tags&#34; id=&#34;stepButtons&#34;&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;0&#34;&gt;Time Complexities&lt;/button&gt;&#xA;                    &lt;button class=&#34;step-problem-guide-tag&#34; id=&#34;step-problem-guide-tag-Complexity&#34; data-slide=&#34;1&#34;&gt;Space Complexities&lt;/button&gt;&#xA;                &lt;/div&gt;&#xA;&#xA;                &lt;div class=&#34;steps-slides&#34; id=&#34;stepsSlides-Complexity&#34;&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O((n &amp;#43; m) log n), where n is the number of intersections and m is the number of roads.&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Average Case:&lt;/b&gt; O((n &amp;#43; m) log n)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O((n &amp;#43; m) log n)&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The time complexity is dominated by the priority queue operations in Dijkstra&amp;#39;s algorithm.&lt;/div&gt;                                               &#xA;                    &lt;/div&gt;&#xA;&#xA;                    &lt;div class=&#34;step-slide&#34;&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Best Case:&lt;/b&gt; O(n &amp;#43; m)&lt;/div&gt;&#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Worst Case:&lt;/b&gt; O(n &amp;#43; m), where n is the number of intersections and m is the number of roads.&lt;/div&gt; &#xA;                        &lt;div class=&#34;&#34;&gt; &lt;b&gt;Description:&lt;/b&gt; The space complexity is dominated by the storage required for the graph representation and the arrays used in Dijkstra&amp;#39;s algorithm.&lt;/div&gt;    &#xA;                    &lt;/div&gt;&#xA;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;        &#xA;&#xA;    &lt;/div&gt; &#xA;&#xA;    &lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6219690368643953&#34;&#xA;     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;&#xA;    &lt;ins class=&#34;adsbygoogle&#34;&#xA;        style=&#34;display:block; text-align:center;&#34;&#xA;        data-ad-layout=&#34;in-article&#34;&#xA;        data-ad-format=&#34;fluid&#34;&#xA;        data-ad-client=&#34;ca-pub-6219690368643953&#34;&#xA;        data-ad-slot=&#34;5533433286&#34;&gt;&lt;/ins&gt;&#xA;    &lt;script&gt;&#xA;        (adsbygoogle = window.adsbygoogle || []).push({});&#xA;    &lt;/script&gt;&#xA;&#xA;    &lt;script&gt;&#xA;        function switchProblemGuideContent(element, id) {&#xA;            document.querySelectorAll(&#39;.problem-guide-tag&#39;).forEach(tag =&gt; {&#xA;                tag.classList.remove(&#39;problem-guide-tag-active&#39;);&#xA;            });&#xA;&#xA;            element.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;&#xA;            document.querySelectorAll(&#39;.problem-guide-topic-content&#39;).forEach(content =&gt; {&#xA;                content.style.display = &#39;none&#39;;&#xA;            });&#xA;&#xA;            const activeContent = document.getElementById(id);&#xA;            activeContent.style.display = &#39;block&#39;;&#xA;            buttons_x(id)&#xA;        }&#xA;&#xA;        function buttons_x(id) {&#xA;&#xA;            const slides = document.getElementById(&#39;stepsSlides-&#39;+ id );&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-&#39; + id );&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;                console.log(buttons[index].id)&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;        }        &#xA;&#xA;        function buttons() {&#xA;            const slides = document.getElementById(&#39;stepsSlides-Problem&#39;);&#xA;            const buttons = document.querySelectorAll(&#39;#step-problem-guide-tag-Problem&#39;);&#xA;            let currentIndex = 0;&#xA;            let startX = 0;&#xA;            let isDragging = false;&#xA;&#xA;            function updateSlides(index) {&#xA;                slides.style.transform = `translateX(-${index * 100}%)`;&#xA;                buttons.forEach(button =&gt; button.classList.remove(&#39;problem-guide-tag-active&#39;));&#xA;                buttons[index].classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            buttons.forEach((button, index) =&gt; {&#xA;                button.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                    currentIndex = index;&#xA;                    updateSlides(currentIndex);&#xA;                });&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchstart&#39;, (e) =&gt; {&#xA;                startX = e.touches[0].clientX;&#xA;                isDragging = true;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchmove&#39;, (e) =&gt; {&#xA;                if (!isDragging) return;&#xA;                const moveX = e.touches[0].clientX - startX;&#xA;                slides.style.transform = `translateX(calc(-${currentIndex * 100}% + ${moveX}px))`;&#xA;            });&#xA;&#xA;            slides.addEventListener(&#39;touchend&#39;, (e) =&gt; {&#xA;                isDragging = false;&#xA;                const endX = e.changedTouches[0].clientX;&#xA;                if (endX &lt; startX - 50 &amp;&amp; currentIndex &lt; buttons.length - 1) {&#xA;                    currentIndex++;&#xA;                } else if (endX &gt; startX + 50 &amp;&amp; currentIndex &gt; 0) {&#xA;                    currentIndex--;&#xA;                }&#xA;                updateSlides(currentIndex);&#xA;            });&#xA;&#xA;            updateSlides(currentIndex);&#xA;&#xA;            const initialTag = document.querySelector(`.problem-guide-tag[data-target=&#34;Problem&#34;]`);&#xA;            if (initialTag) {&#xA;                initialTag.classList.add(&#39;problem-guide-tag-active&#39;);&#xA;            }&#xA;&#xA;            const contentElements = document.querySelectorAll(&#39;.problem-guide-content&#39;);&#xA;            let maxHeight = 0;&#xA;            contentElements.forEach(element =&gt; {&#xA;                const height = parseFloat(getComputedStyle(element).height);&#xA;                if (height &gt; maxHeight) {&#xA;                    maxHeight = height;&#xA;                }&#xA;            });&#xA;&#xA;            document.querySelector(&#39;.problem-guide-content&#39;).style.height = maxHeight + &#39;px&#39;;&#xA;&#xA;        }&#xA;&#xA;        document.addEventListener(&#39;DOMContentLoaded&#39;, buttons);&#xA;    &lt;/script&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-ways-to-arrive-at-destination/description/&#34;&gt;&lt;code&gt;Link to LeetCode Lab&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
