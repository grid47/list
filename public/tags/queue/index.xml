<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Queue on grid47</title>
    <link>http://localhost:1313/tags/queue/</link>
    <description>Recent content in Queue on grid47</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>www.grid47.com - All rights reserved</copyright>
    <lastBuildDate>Wed, 06 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/queue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 225: Implement Stack using Queues</title>
      <link>http://localhost:1313/leetcode/solution-225-implement-stack-using-queues/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-225-implement-stack-using-queues/</guid>
      <description>&lt;h2 id=&#34;hahahugoshortcode3685s0hbhb&#34;&gt;&lt;figure class=&#34;remote-image&#34; style=&#34;text-align:center; margin: 0;&#34;&gt;&#xA;    &lt;div style=&#34;position: relative; width:900px; max-width:100%; padding-bottom:56.25%; overflow: hidden; border-radius:0px;&#34;&gt;&#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/grid47/list-images/refs/heads/main/list/225.webp&#34; &#xA;           alt=&#34;A series of glowing queues stacked neatly, showing elements being added and removed smoothly.&#34; &#xA;           style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;      &lt;figcaption style=&#34;font-size: 0.5em; font-weight: 300; color:#555; margin-top: 4px; line-height: 1.2;&#34;&gt;&#xA;        Solution to LeetCode 225: Implement Stack using Queues Problem&#xA;      &lt;/figcaption&gt;&#xA;    &#xA;  &lt;/figure&gt;&#xA;  &lt;/h2&gt;&#xA;&lt;p&gt;Design a stack that supports LIFO (Last In First Out) operations using only one queue. Implement standard stack operations: push, pop, top, and empty.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 232: Implement Queue using Stacks</title>
      <link>http://localhost:1313/leetcode/solution-232-implement-queue-using-stacks/</link>
      <pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-232-implement-queue-using-stacks/</guid>
      <description>&lt;h2 id=&#34;hahahugoshortcode3726s0hbhb&#34;&gt;&lt;figure class=&#34;remote-image&#34; style=&#34;text-align:center; margin: 0;&#34;&gt;&#xA;    &lt;div style=&#34;position: relative; width:900px; max-width:100%; padding-bottom:56.25%; overflow: hidden; border-radius:0px;&#34;&gt;&#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/grid47/list-images/refs/heads/main/list/232.webp&#34; &#xA;           alt=&#34;A series of stacks transforming into a queue, with elements gently flowing between them.&#34; &#xA;           style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;      &lt;figcaption style=&#34;font-size: 0.5em; font-weight: 300; color:#555; margin-top: 4px; line-height: 1.2;&#34;&gt;&#xA;        Solution to LeetCode 232: Implement Queue using Stacks Problem&#xA;      &lt;/figcaption&gt;&#xA;    &#xA;  &lt;/figure&gt;&#xA;  &lt;/h2&gt;&#xA;&lt;p&gt;Design and implement a queue using only two stacks. The queue should support the basic operations of a normal queue: enqueue, dequeue, peek, and checking if the queue is empty.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 341: Flatten Nested List Iterator</title>
      <link>http://localhost:1313/leetcode/solution-341-flatten-nested-list-iterator/</link>
      <pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-341-flatten-nested-list-iterator/</guid>
      <description>&lt;h2 id=&#34;hahahugoshortcode4123s0hbhb&#34;&gt;&lt;figure class=&#34;remote-image&#34; style=&#34;text-align:center; margin: 0;&#34;&gt;&#xA;    &lt;div style=&#34;position: relative; width:900px; max-width:100%; padding-bottom:56.25%; overflow: hidden; border-radius:0px;&#34;&gt;&#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/grid47/list-images/refs/heads/main/list/341.webp&#34; &#xA;           alt=&#34;A nested list unfolding and flattening into a 1D array, with each item softly glowing as it appears.&#34; &#xA;           style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;      &lt;figcaption style=&#34;font-size: 0.5em; font-weight: 300; color:#555; margin-top: 4px; line-height: 1.2;&#34;&gt;&#xA;        Solution to LeetCode 341: Flatten Nested List Iterator Problem&#xA;      &lt;/figcaption&gt;&#xA;    &#xA;  &lt;/figure&gt;&#xA;  &lt;/h2&gt;&#xA;&lt;p&gt;You are given a nested list of integers nestedList, where each element can either be an integer or a sublist containing integers or other sublists. Implement an iterator to flatten this nested list.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 387: First Unique Character in a String</title>
      <link>http://localhost:1313/leetcode/solution-387-first-unique-character-in-a-string/</link>
      <pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-387-first-unique-character-in-a-string/</guid>
      <description>&lt;h2 id=&#34;hahahugoshortcode4149s0hbhb&#34;&gt;&lt;figure class=&#34;remote-image&#34; style=&#34;text-align:center; margin: 0;&#34;&gt;&#xA;    &lt;div style=&#34;position: relative; width:900px; max-width:100%; padding-bottom:56.25%; overflow: hidden; border-radius:0px;&#34;&gt;&#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/grid47/list-images/refs/heads/main/list/387.webp&#34; &#xA;           alt=&#34;A glowing string with the first unique character softly highlighted.&#34; &#xA;           style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;      &lt;figcaption style=&#34;font-size: 0.5em; font-weight: 300; color:#555; margin-top: 4px; line-height: 1.2;&#34;&gt;&#xA;        Solution to LeetCode 387: First Unique Character in a String Problem&#xA;      &lt;/figcaption&gt;&#xA;    &#xA;  &lt;/figure&gt;&#xA;  &lt;/h2&gt;&#xA;&lt;p&gt;Given a string s, find the index of the first character that does not repeat in the string. If all characters repeat, return -1.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 622: Design Circular Queue</title>
      <link>http://localhost:1313/leetcode/solution-622-design-circular-queue/</link>
      <pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-622-design-circular-queue/</guid>
      <description>&lt;h2 id=&#34;hahahugoshortcode4261s0hbhb&#34;&gt;&lt;figure class=&#34;remote-image&#34; style=&#34;text-align:center; margin: 0;&#34;&gt;&#xA;    &lt;div style=&#34;position: relative; width:900px; max-width:100%; padding-bottom:56.25%; overflow: hidden; border-radius:0px;&#34;&gt;&#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/grid47/list-images/refs/heads/main/list/622.webp&#34; &#xA;           alt=&#34;A circular queue with elements being added and removed, each action softly glowing as the queue operates.&#34; &#xA;           style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;      &lt;figcaption style=&#34;font-size: 0.5em; font-weight: 300; color:#555; margin-top: 4px; line-height: 1.2;&#34;&gt;&#xA;        Solution to LeetCode 622: Design Circular Queue Problem&#xA;      &lt;/figcaption&gt;&#xA;    &#xA;  &lt;/figure&gt;&#xA;  &lt;/h2&gt;&#xA;&lt;p&gt;Design and implement a Circular Queue. A circular queue is a linear data structure where the operations follow the FIFO principle, and the last position is connected to the first, forming a circle. This design allows better space utilization.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 641: Design Circular Deque</title>
      <link>http://localhost:1313/leetcode/solution-641-design-circular-deque/</link>
      <pubDate>Tue, 03 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-641-design-circular-deque/</guid>
      <description>&lt;h2 id=&#34;hahahugoshortcode4269s0hbhb&#34;&gt;&lt;figure class=&#34;remote-image&#34; style=&#34;text-align:center; margin: 0;&#34;&gt;&#xA;    &lt;div style=&#34;position: relative; width:900px; max-width:100%; padding-bottom:56.25%; overflow: hidden; border-radius:0px;&#34;&gt;&#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/grid47/list-images/refs/heads/main/list/641.webp&#34; &#xA;           alt=&#34;A circular deque with elements being added and removed, each operation glowing softly as it occurs.&#34; &#xA;           style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;      &lt;figcaption style=&#34;font-size: 0.5em; font-weight: 300; color:#555; margin-top: 4px; line-height: 1.2;&#34;&gt;&#xA;        Solution to LeetCode 641: Design Circular Deque Problem&#xA;      &lt;/figcaption&gt;&#xA;    &#xA;  &lt;/figure&gt;&#xA;  &lt;/h2&gt;&#xA;&lt;p&gt;Design a data structure that simulates a circular double-ended queue (deque) with a fixed maximum size. Implement the MyCircularDeque class with methods for inserting, deleting, and accessing elements at both ends of the deque.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 649: Dota2 Senate</title>
      <link>http://localhost:1313/leetcode/solution-649-dota2-senate/</link>
      <pubDate>Tue, 03 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-649-dota2-senate/</guid>
      <description>&lt;h2 id=&#34;hahahugoshortcode4273s0hbhb&#34;&gt;&lt;figure class=&#34;remote-image&#34; style=&#34;text-align:center; margin: 0;&#34;&gt;&#xA;    &lt;div style=&#34;position: relative; width:900px; max-width:100%; padding-bottom:56.25%; overflow: hidden; border-radius:0px;&#34;&gt;&#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/grid47/list-images/refs/heads/main/list/649.webp&#34; &#xA;           alt=&#34;A series of characters where the senate is divided and illuminated by those voting for or against, softly glowing.&#34; &#xA;           style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;      &lt;figcaption style=&#34;font-size: 0.5em; font-weight: 300; color:#555; margin-top: 4px; line-height: 1.2;&#34;&gt;&#xA;        Solution to LeetCode 649: Dota2 Senate Problem&#xA;      &lt;/figcaption&gt;&#xA;    &#xA;  &lt;/figure&gt;&#xA;  &lt;/h2&gt;&#xA;&lt;p&gt;In a Senate made up of senators from two parties, Radiant and Dire, senators can either ban another senator from voting or announce victory if only one party remains with active senators. Predict which party will announce the victory and change the game.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 918: Maximum Sum Circular Subarray</title>
      <link>http://localhost:1313/leetcode/solution-918-maximum-sum-circular-subarray/</link>
      <pubDate>Wed, 07 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-918-maximum-sum-circular-subarray/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;You are given a circular integer array &lt;code&gt;nums&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;. A circular array means that the end of the array connects back to the beginning. Your task is to find the maximum possible sum of a non-empty subarray of &lt;code&gt;nums&lt;/code&gt;, which can wrap around the array. Formally, you need to find the maximum sum of a subarray where the subarray can either be within the linear array or it can wrap around from the end to the beginning.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 950: Reveal Cards In Increasing Order</title>
      <link>http://localhost:1313/leetcode/solution-950-reveal-cards-in-increasing-order/</link>
      <pubDate>Sun, 04 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-950-reveal-cards-in-increasing-order/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;You are given an array of integers, where each integer represents a unique card in a deck. The deck can be shuffled into any order, and the goal is to reorder it such that the cards are revealed in increasing order. To do this, you repeatedly reveal the top card and move the next card to the bottom of the deck until all cards are revealed. The problem is to return the order of cards that would reveal them in increasing order.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1352: Product of the Last K Numbers</title>
      <link>http://localhost:1313/leetcode/solution-1352-product-of-the-last-k-numbers/</link>
      <pubDate>Mon, 24 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-1352-product-of-the-last-k-numbers/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Design an algorithm that accepts a stream of integers and retrieves the product of the last k integers in the stream.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1438: Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit</title>
      <link>http://localhost:1313/leetcode/solution-1438-longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/</link>
      <pubDate>Sun, 16 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-1438-longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Given an array of integers &lt;code&gt;nums&lt;/code&gt; and a positive integer &lt;code&gt;limit&lt;/code&gt;, determine the length of the longest subarray where the absolute difference between the minimum and maximum elements is less than or equal to &lt;code&gt;limit&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1670: Design Front Middle Back Queue</title>
      <link>http://localhost:1313/leetcode/solution-1670-design-front-middle-back-queue/</link>
      <pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-1670-design-front-middle-back-queue/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Design a queue that supports operations at the front, middle, and back. Implement the &lt;code&gt;FrontMiddleBackQueue&lt;/code&gt; class with methods for adding and removing elements from these positions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1696: Jump Game VI</title>
      <link>http://localhost:1313/leetcode/solution-1696-jump-game-vi/</link>
      <pubDate>Tue, 21 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-1696-jump-game-vi/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;You are given a 0-indexed integer array &amp;rsquo;nums&amp;rsquo; and an integer &amp;lsquo;k&amp;rsquo;. You start at index 0 and can jump up to &amp;lsquo;k&amp;rsquo; steps forward at a time. Your task is to find the maximum sum of elements you can get by jumping to the last index, visiting subarrays of unique elements.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1700: Number of Students Unable to Eat Lunch</title>
      <link>http://localhost:1313/leetcode/solution-1700-number-of-students-unable-to-eat-lunch/</link>
      <pubDate>Tue, 21 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-1700-number-of-students-unable-to-eat-lunch/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;In a school cafeteria, sandwiches are placed in a stack and students queue up to get one. Each student has a preference for the type of sandwich, and they either take the sandwich from the stack or move to the back of the queue if the sandwich is not to their liking. The goal is to determine how many students are unable to get a sandwich.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 1823: Find the Winner of the Circular Game</title>
      <link>http://localhost:1313/leetcode/solution-1823-find-the-winner-of-the-circular-game/</link>
      <pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-1823-find-the-winner-of-the-circular-game/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;In this problem, there are &lt;code&gt;n&lt;/code&gt; friends sitting in a circle. The game proceeds by counting &lt;code&gt;k&lt;/code&gt; friends clockwise starting from the 1st friend. The last friend counted leaves the circle. This continues until only one friend remains, who is the winner. Your task is to find the winner of the game given &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 2073: Time Needed to Buy Tickets</title>
      <link>http://localhost:1313/leetcode/solution-2073-time-needed-to-buy-tickets/</link>
      <pubDate>Sat, 13 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-2073-time-needed-to-buy-tickets/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;You are given a queue of &lt;code&gt;n&lt;/code&gt; people, where each person wants to buy a specific number of tickets. The task is to determine the time taken for the person at index &lt;code&gt;k&lt;/code&gt; to finish buying all their tickets.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 2327: Number of People Aware of a Secret</title>
      <link>http://localhost:1313/leetcode/solution-2327-number-of-people-aware-of-a-secret/</link>
      <pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-2327-number-of-people-aware-of-a-secret/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;On day 1, one person discovers a secret. Each person will share the secret after a delay and forget it after a certain number of days. Return the number of people who know the secret at the end of day n, modulo 10^9 + 7.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 2526: Find Consecutive Integers from a Data Stream</title>
      <link>http://localhost:1313/leetcode/solution-2526-find-consecutive-integers-from-a-data-stream/</link>
      <pubDate>Wed, 28 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-2526-find-consecutive-integers-from-a-data-stream/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;You need to implement a DataStream class that processes a stream of integers and checks whether the last k integers in the stream are equal to a specified value.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 2762: Continuous Subarrays</title>
      <link>http://localhost:1313/leetcode/solution-2762-continuous-subarrays/</link>
      <pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-2762-continuous-subarrays/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;You are given a 0-indexed integer array &amp;rsquo;nums&amp;rsquo;. A subarray of &amp;rsquo;nums&amp;rsquo; is called continuous if the absolute difference between any two elements in the subarray is less than or equal to 2. Return the total number of continuous subarrays.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leetcode 2944: Minimum Number of Coins for Fruits</title>
      <link>http://localhost:1313/leetcode/solution-2944-minimum-number-of-coins-for-fruits/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/leetcode/solution-2944-minimum-number-of-coins-for-fruits/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;You are given a list of integers &amp;lsquo;prices&amp;rsquo;, where each element &amp;lsquo;prices[i]&amp;rsquo; represents the cost to purchase the &amp;lsquo;i&amp;rsquo;-th fruit. If you buy the &amp;lsquo;i&amp;rsquo;-th fruit at prices[i] coins, you get all subsequent fruits for free. Your task is to determine the minimum number of coins required to purchase all the fruits.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
